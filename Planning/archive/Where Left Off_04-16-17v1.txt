



Where I left off
------------------------
Note: See LaserControlTester.ino for how to use debug flags
K:\Working Directory\DESIGN_PROJ\Design Projects\Robot\Workspaces\Arduino\2nd Gen Code\GitHub\arduino\LaserControlTester


write more class testers to test functionality of the rover



[done]go back and make all private variables start with an _
[done]gpsDataParserPractice (used to test filtering, checksum, parsing, and validating algorithms. Though not kept up to date.)
[done]	then migrate them over to the classes "RoverGpsSensor"
	K:\Working Directory\DESIGN_PROJ\Design Projects\Robot\Workspaces\Arduino\2nd Gen Code\GitHub\arduino\libraries\RoverSensors





test the new arduino led classes with new timers and counters on the arduino

	[done, need to test on rover] PirSensorTester
	[done, need to test on rover] UltrasonicSensorTester
	[done, need to test on rover] IrDistanceSensor
	[done, need to test on rover] WakeUpTester_COMM
	[done, need to test on rover] WakeUpTester_MAIN
	[done, need to test on rover] WakeUpTester_AUXI
	done, need to test on rover] WakeUpTester_NAVI
			[DONE] RoverSleeperClient
			[DONE] RoverSleeperServer

	[done, need to test]write a universal simulator/tester on a mega to test any megas or unos
	
	[done, need to test on rover]MotorAndServoTester_MAIN
		with
	[done, need to test on rover, need to calibrate and put in the initial calibration values]MotorAndServoTester_NAVI
		[done]Wheel Encoder
		[done]MotorPowerControl (Motor Fet Control, Motor Enable Status)				
		[done] BufferSelect
		[done] MotorController (for steering and acceleration)						
		[done] MotorPowerControl	
		[done] GimbalConroller (for pan and tilt)
		References:
		K:\Working Directory\DESIGN_PROJ\Design Projects\Robot\Workspaces\Arduino\Good Code Backup\Design Workspace Backup\Arduino 09-06-15v1\Rover Mini Sketches\Studies\Done\Rover_MtCtlr_And_Servo_Testerv5
		K:\Working Directory\DESIGN_PROJ\Design Projects\Robot\Workspaces\Arduino\Good Code Backup


		
		
	[done, need to test on rover]LaserControlTester [AUXI]
		Reference:
				K:\Working Directory\DESIGN_PROJ\Design Projects\Robot\Workspaces\Arduino\Good Code Backup\Design Workspace Backup\Arduino 09-06-15v1\Rover Mini Sketches\Studies\Done\Rover_Laser_Testerv4
	


	[done, need to test on rover] CurrentSensorControlTester (Current Faults and Resets) [AUXI]
			Reference:
				K:\Working Directory\DESIGN_PROJ\Design Projects\Robot\Workspaces\Arduino\Good Code Backup\Design Workspace Backup\Arduino 09-06-15v1\Rover Mini Sketches\Studies\Done\Rover_Curr_Snse_Resetv3
		
	[done, need to test on rover]HwResetTester (see how I did server and client for the commTester)
		
	[done, need to test on rover]			
		LedTester (
								[done, need to retest due to updates]write global delay counter (see Rover_Heart_LED_Testerv3.ino). pass this to the heart led
								[done, need to retest due to updates]AnalogLed->HeartLed
								UnderglowLeds->DigitalLed->Underglow
								SideSignalLight(left, right)
								BeaconAssembly->DigitalLed->Beacon[ir, blue]
								TailLightAssembly->DigitalLed->Taillights
								HeadlightAssembly->DigitalLed->(Headlight Left, Headlight Right, Signal Left, Signal Right, Fog Left, Fog Right)
								
						)
					
	
	
				
		
			
		[done, need to test on rover] RoverAnalogSignalsTester (mux control, op amp output) : temp, voltage, light, current
			Add objects to convert signals
				[DONE]Current
				[DONE]Voltage
				[DONE]Photo
					http://emant.com/316002.page
					https://learn.adafruit.com/photocells/using-a-photocell
					https://developer.mbed.org/users/4180_1/notebook/using-a-photocell-to-determine-light-levels/
					https://www.arduino.cc/en/Tutorial/Genuino101CurieIMUOrientationVisualiser				
					https://www.arduino.cc/en/Main/ArduinoBoard101
				[DONE]Temp
			
			[DONE]Add a way to get more accurate ADC values
			[DONE]if so, update analogsignals as well as irsensor, and anywhere else where ADC is called


	
	[done, need to test on rover] GpsTester
		see these text files for sample gps data
			arduino filtered gps position fixed
			arduino filtered gps on startup
	
	
	
	

	[done, need to test on rover] ImuTester
		
		See: K:\Working Directory\DESIGN_PROJ\Design Projects\Robot\Workspaces\Arduino\Good Code Backup\Design Workspace Backup\Arduino 09-06-15v1\Rover Mini Sketches\Studies\Done\Rover_IMU_Testerv3
			[DONE]have the rover use compass only for now
			
			[DONE]user timer functions with the imu code
			[DONE]also get it to print compass heading
			[DONE]format the print output			
			[DONE]have it send back roll pitch and yaw serially for python visuals
			[DONE] any IMU data to be rerouted from the AUXI to MAIN to COMM and over XBee
			Note:
			Will make the the Xbee transmit the IMU data in AHRS format where it can be listened by a secondary Xbee which filters out everything but the AHRS format and display the IMU visual on a PC/laptop with the running python code.
			This will be independent of the main ground code.


				[MAYBE DO LATER] need a way to calibrate as well
				https://github.com/pololu/minimu-9-ahrs-arduino
				https://www.raspberrypi.org/blog/real-time-orientation-display-with-the-minimu-9-v2/
			[NAH, not needed right now]will use the imu for roll, pitch, and yaw only. no need to write code to use accelerometers.
			[NAH, not needed right now]will send back roll, pitch, and yaw for visualization and/or detect compass heading.
			

		
		
		
		[done, need to test on rover] RoverCommTester_COMM
		[done, need to test on rover] RoverCommTester_MAIN
		[done, need to test on rover] RoverCommTester_AUXI
		[done, need to test on rover] RoverCommTester_NAVI

			
			
		[done, need to test on rover] Write an uptime counter classes using example for the UNO COMM

		
		[done, maybe buggy, need to test]MQGasSensor	
			Note: The output is still zero. Debug it later once plug the sensor in and measure and update the fixed resistor value.		
			[do later after hook sensor to see if it's really an issue with the code or the simulation]debug why gas sensor is output 0's
				see "DEBUG AND DELETE" lines
			
			
			[DONE, set it to 3 seconds for now. change it to 3 minutes once done debugging by turning off the debug flag: _DEBUG_3SEC_WARM_UP_]Use RoverOnTime in order to preheat the gas sensor to 3 minutes before calibrating and using the reading values
			[DONE] replace the calibration delays with timer and delay objects


		
	[DONE]Create CommandCreator classes
		[IN PROGRESS]Reference: Also see the spreadsheet "Command Creator..." at K:\Working Directory\DESIGN_PROJ\Design Projects\Robot\My Notes
			
		
	



	[NAH, no rework. It's not a long term test but a sandbox-ish code]
		gpsDataParserPractice to not use string class and also use the DataType class for conversion.
		


	
		


[DONE]
	CommBroadcast_COMM
	CommBroadcast_NAVI
	CommBroadcast_AUXI
	CommBroadcast_MAIN
	Note: Designed to work when the Serial of the program will route internally. So if anything is going out to PC USB, it won't be routed.
	Any .ino should have an option for internal routing for output as keyboard commands.
	For classes debugging, to keep it simple, allow this to be used for PC USB only (for easier maintanence).
	Note: Make sure to activate the internal Serial if that .ino didn't activate it before.
	You can search for "Serial" to help highlight all Serial calls and make sure you created a broadcast internal routing for all PC USB Serials.
	For COMM you don't need to do anything since PC USB is the same routing for internal routing.
[DONE]
	CommRollCall_COMM
	CommRollCall_NAVI
	CommRollCall_AUXI
	CommRollCall_MAIN	
	
-------------------------------
[DONE]Convert test code to broadcast compatible as needed
	
//Uncomment to debug
//#define _DEBUG_COMM_BROADCAST //Debugging with COMM Broadcast

##NAVI and AUXI##
#ifdef _DEBUG_COMM_BROADCAST
	Serial2.println(F("NAVI Awoken!"));//output to PC for debug
#else
	Serial.println(F("NAVI Awoken!"));//output to PC for debug
#endif

##MAIN##
#ifdef _DEBUG_COMM_BROADCAST
	Serial1.println(F("Reset Complete!"));
#else
	Serial.println(F("Reset Complete!"));
#endif


##COMM##
No Change Needed

-------------------------------








[DONE, WORKS WITH BROADCAST] alternate ultrasonic to prevent interference
			UltrasonicSensorTest

			
			
-------------------------------
[DONE] Re-convert test code to broadcast compatible as needed
	
In the .h or .ino
//Uncomment to debug
//#define _DEBUG_COMM_BROADCAST //Debugging with COMM Broadcast


In the .cpp or .ino
##NAVI and AUXI##
#ifdef _DEBUG_COMM_BROADCAST
	#define _SERIAL_DEBUG_CHANNEL_ Serial2
#else
	#define _SERIAL_DEBUG_CHANNEL_ Serial
#endif

##MAIN##
#ifdef _DEBUG_COMM_BROADCAST
	#define _SERIAL_DEBUG_CHANNEL_ Serial1
#else
	#define _SERIAL_DEBUG_CHANNEL_ Serial
#endif


##COMM##
No Change Needed

	
-------------------------------


[DONE]Read how to do state machines
			
			
			
[DONE] work on COMM State Machine
			
			
			
			
			
			
			
			
			
			
			
			


=================3 weekend===================				


4/15-4/16
Finish AUXI State Machine
	
work on AUXI State Machine
	See file: AUXI State Machine_add_date_when_archive
		See: ??LEFT OFF HERE (remember to use the *begin* flag at first time you're switching to a new mode)																									
	See file: Command Creator.. .xls
	K:\Working Directory\DESIGN_PROJ\Design Projects\Robot\My Notes
	
	
	

4/22-4/23, 4/29-4/30
then go back to COMM and MAIN and allow the SYNCHRONIZATION mode to receive a GENERIC_HEALTH_STATUS_ERROR
when MAIN gets a GENERIC_HEALTH_STATUS_ERROR
	it will shut down the motor
	send a copy to COMM, where COMM will have an error heart led patter, and if the link is secure COMM will send a copy to CMNC
	send a copy to NAVI, where NAVI will turn off the LEDs
//make sure to allow sw requests from MAIN for NAVI and AUXI SYNCHRONIZATION modes
make sure once the rover is awoken, it will re-sync then continue with what it was doing) i.e. keep motor power on, remember it's destination, keep a secure link, etc.
work on NAVI State Machine
start on NAVI obstacle avoidance algorithm

		
		
		
		
put code to measure loop time, then use it as the message delay between a message and a redirect


	
	
	
	
Note: Each type of arduino may need different states and modes.

most likely, have each data share pushed automatically to the destination arduino (to minimize network traffic for requests)
have a mode for each type of data share and rotate between the modes under normal circumstances
Also the system won't pull fresh required data, since this will just slow the system down and it will not be fresh by the time it gathers everything anyways.
	instead data will always be pushed to the destination and refreshed automatically. and when the destination needs to use data, it will use whatever data it has already stored/registered, even if it's slightly old.



i.e.
secure link is only for comm?
navigation algoritms for navi
redirection for main
auxi controls for auxi
etc.
		
		
			
For command tags, see command creator excel in K:\Working Directory\DESIGN_PROJ\Design Projects\Robot\My Notes

Take a video as you talk through your code to see if it makes sense, as well as documenting it.


#videos
Save videos here:
	P:\Code Overview Videos

	
=================1 weekend===================				

			
Paper design Navigation Algorithm
			
			
			See 			//LEFT OFF HERE in RoverHealthAndStatus.cpp
Then go back and update RoverProgram_MAIN with changes from RoverProgram_AUXI (i.e. HOLD states, etc.)
			

			
=================1 weekend===================				


Test using COMM Broadcast:

	[RETEST, it was in debugging mode last time with main code commented out] LaserControlTester
			
	
		
	[IN PROGRESS]MotorAndServoTester_MAIN
	[IN PROGRESS]MotorAndServoTester_NAVI
		[NEED TO DO]review rover encoder output when testing these
		[NEED TO DO] test mosfet off
	

		[RESTEST ON ROVER DUE TO SOME MINOR CHANGES] RoverGpsSensor
		Also do a "couple hours" sram test with the gps code
		added some extra delay, but in general the gps program did not crash when used with PC, only sometimes with laptop. So it's not the rover hardware or software, it's the laptop, which is fine.

		
			
	
	
			[DONE, UNIT TESTED. NOW TEST ON ROVER]
			CommTester_AUXI
			CommTester_NAVI
			CommTester_MAIN
			CommTester_COMM		
		
	
	
	calibrate the photosensors and temp sensors using 
		CommBroadcast_COMM
		CommBroadcast_NAVI
		CommBroadcast_AUXI
		CommBroadcast_MAIN
		
		
		
		

=================1 weekends===================			


	
	
		

	

	
	start lat/long math	
	https://sites.google.com/site/wayneholder/self-driving-rc-car/getting-from-point-a-to-point-b
	
	
	
		[NEEDS REWORK, see Test Results]AnalogSignalsTester	
		
		
			[DONE, UNIT TESTED. NOW TEST ON ROVER] MqGasSensor
	
			plug in the gas sensor and see if the data works
					if not, skip over it for now. there's other more important things above the rover you can work on. (just ignore the gas sensor for now and come back to it if you ever have time)
			gather the details of the other mq gas graphs and derive/verify their formula
				watch https://www.youtube.com/watch?v=sBhEi4L91Sg
				
	
	
		
		Calibrate the compass on the rover
	https://sites.google.com/site/wayneholder/self-driving-rc-car/calibrating-the-compass	
	
		
	
	Go back and change all Serial.begin(9600); to 	Serial.begin(PC_USB_BAUD_RATE);

	
	

	
Maybe go back and use #ifdef for Serial1, Serial2, and Serial3 instead of hardcoding them. Make sure to test one first to see if it works (and for all functions, not just Serial.begin)
	
Note: Try not to add any more functionality that will delay your project. Write a good enough project, take what you learned, and move on to school.


			
=================8 weekends===================			

~2 weekends per an Arduino

Test code as you go!!!

When debugging the state machines, make sure things that shouldn't be filtered out aren't, vice versa.
Watch out for glitches with missed acknowledgements and one system going ahead or behind another.
Watch for vicious loops, or messages overtaking all lower priority ones causes the lower priority stuff to never run.
Check for things going to the wrong state (as you might have redesigned the order, etc.)
Make sure I didn't forget to code any of the steps in the well planned state machine. A missed step could break the machine as it was well thought out.
Shared names between command tags and states or modes could cause conflicts or confusion.

Create all state machine frameworks
Put in commands
test a loopback
then put other objects in



	Start writing state machine classes for each of the 4 arduinos (about one weekend for each arduino)
		Set up state machine code structure, then work on object avoidance, then directional sensor input (like gps, imu, encoder), then health sensors, then commands

	[IN PROGRESS]RoverProgram_AUXI.ino 
		RoverHeathAndStatus(takes in temp, voltage, photo, and current data and determines if the system needs to shut down or can continue) - Finite State Machine			
	[IN PROGRESS]RoverProgram_MAIN.ino
		RoverCaptain - Finite State Machine (considers and prioritizes input from the RoverNavigator and RoutePlanner, and RoverHeathAndStatus and decides which heading the rover should go and for how long, then it sends commands to RoverNavigator_NAVI)		
	RoverProgram_NAVI.ino 		
		RoverNavigator (takes in sensor data and plans a course to prevent a collision. Then navigates by sending actions to RoverDriver) - Finite State Machine
			RoverDriver - State Design Pattern (controls the motor controller and gimbal) 
		RoutePlanner (takes current position via gps data and compass heading and next waypoint via longitude and latitude and recommends heading and distance)
			Waypoint
	RoverProgram_COMM.ino
		RoverCommunicator - Finite State Machine (transmits, processes, and receives messages commands. Also controls Arduino COMM's functionality)
			RoverSecuredCommLink - State Machine (allows transmission and reception of messages after it verifies the connection is secure)			
	All Arduinos:
		Use the CommandCreator class to send commands messages from one Arduino to the next.
			[only unit tested so far, will have to test more during integration]
			[IN PROGRESS]Reference: Also see the spreadsheet "Command Creator..." at K:\Working Directory\DESIGN_PROJ\Design Projects\Robot\My Notes
			
	
	
Features:
Return Home
Breadcrumbs
Mission Route Based On A Chain Of Waypoints
Full Manual Drive	
Manual Drive	with Avoidance Assistance
Full Auto Drive
RF Steath mode where the rover transmits nothing


		
	 
Write state machine	
come up with prioritization excel spreadsheet table to know what gets the most priority
	voltage/current sensors (if over voltage or current, shut down)
	-ultrasonic/ir (avoid obstacles while moving)
	-gps for navigation
	-laser
	-led for indication
	-etc (manual vs. auto control/override)
-work on state machine for priority/arbitration
-work on state machine for navigation	



	
	Arduino Generic:
	-parse command data
	-send arduino self generated data
	-initialize/calibration complete class
	
	Arduino Specific:
	-MAIN: monitor status
	-NAVI: drive rover/navigate
	-AUXI: control auxillaries
	-COMM: sleep/pir/communicate/reset control (HW/SW command and control), controller hack proof validator
		For controller hack proof validator, see "#Tamper Proof" below.

		
=================8 WEEKENDS===================			

Test code and fix
About 2 weekend each arduino

	



	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
		












	
	
	
	

	






IF HAVE TIME
===================
test the eeprom and shifting serial reads (encryption) with the UNO

#homing beacon
build a small battery powered arduino/xbee
it will have switches to control/send commands for
	buffer channel select
	mosfet control
	gps coordinates of this homing beacon to go to
	emergency stop
	


#Tamper Proof
If have time and want to, write a key to the EEPROM in the arduino (using a separate sketch)
Then on startup, you must send over Xbee that key to the rover before it will start accepting commands
https://www.arduino.cc/en/Tutorial/EEPROMWrite



SANDBOX ROVER CODE TEST
try to figure out when when i do a getData() and it returns a string I can't concat to that string within the same class by using .concat. Only calling the original private string variable with .concat seemed to work
see RoverComm for details
make sure each of your classes only do one thing



[arduino doesn't like delays to be called globally. so if you do a reset on a constructor created globally the code won't work. best not to use delays else if you must, abandon this whole reset thing in contructors.] maybe remove resets in the void setup function. instead do a self reset everytime the object is created (when the constructor is called)
Reference: http://forum.arduino.cc/index.php?topic=46517.0
	make sure resets are added in every constructor if you are going to do this.
	
	
	
	
	
	

Maybe buy an Arduino 101 and swap our the COMM UNO and see if I can get the gyro to work.
	https://www.youtube.com/watch?v=QOSEMUO1Qnk

	
	
	
[IF NEEDED/HAVE TIME]	
write calibration program in qt
     calibrates compass, ims, servos and creates the RoverCalibration.h that can be copied over


	
	
	

Note: Go ahead and write arduino code in regular C++ OOP (since you have limited memory and functionality on the Arduino) and then the ground software in Java with Design Patterns and Object Oriented Analysis and Design.



Working on:
K:\Working Directory\DESIGN_PROJ\Design Projects\Robot\Workspaces\Arduino\2nd Gen Code\GitHub\arduino\RoverGen2
	open the .sln with visual studio community with visual micro extension
and
K:\Working Directory\DESIGN_PROJ\Design Projects\Robot\Workspaces\Arduino\2nd Gen Code\GitHub\arduino\libraries
	edit the .cpp and .h with notepad++ or visual studio community with visual micro extension



in grad school or beyond, learn machine learning










Aslo refer to:
K:\Design Workspace\Arduino\Rover Mini Sketches\Studies\Done
K:\Design Workspace\Arduino
K:\Working Directory\DESIGN_PROJ\Design Projects\Robot\Workspaces\Arduino






	
	
	
Rover Improvements
Real time clock
MPU+FPGA+MCU
Better/easier IMU
Wifi























