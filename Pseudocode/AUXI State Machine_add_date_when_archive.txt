Note: Make sure for any serials, use a #define serial_type. So it can be replaced with PC USB's serial if needed.
Note: For redirects, it assumes only one arduino will be redirected to another. If by chance, two source Arduinos are being redirected to the same destination Arduino, only one will get through and the other message will be dropped.
	The prioritization will be giving to the hard coded order of the if/else statements.
	This is a design weakness that may be able to be improved later.
	For now keep it this way to reduce the complexity of the code and memory usage.
	So right now each transmission cycle will send up to two messages. One for internal messages going out, and the other for external messages being redirected to another external destination.
Note: For command tags, see command creator excel in K:\Working Directory\DESIGN_PROJ\Design Projects\Robot\My Notes
Note: Once the system goes into the state, SYSTEM_ERROR, it can only be fixed with a HW or SW reset.

#define AUXI_SYNC_TIMEOUT_VALUE ??
#define CONCURRENT_TRANSMISSION_DELAY		??//delay for about 1-5ms or so between potentially sending messages out again to the same arduino





At POR (defaults):
	Current State: RUN_HOUSEKEEPING_TASKS
	Next State: RUN_HOUSEKEEPING_TASKS
	Current Mode: POWER_ON_AND_HW_RESET *begin*
	Next Mode: POWER_ON_AND_HW_RESET 
	pc_usb_msg_queue = CMD_TAG_NO_MSG (command tag, not boolean since use by CREATE_DATA to generate messages as well as TX_COMMUNICATIONS as a flag) // PC_USB won't get autodata, as it would make the code really complex with a lot of duplication. If needed, you can always reroute the serial channels using #ifdef
	main_pri_msg_queue = CMD_TAG_NO_MSG (command tag, not boolean since use by CREATE_DATA to generate messages as well as TX_COMMUNICATIONS as a flag) // primary message queue
	main_sec_msg_queue = CMD_TAG_NO_MSG (command tag, not boolean since use by CREATE_DATA to generate messages as well as TX_COMMUNICATIONS as a flag) //secondary message queue
	
	//Note: Since all messages go through MAIN, the destination has to be provided/preset/predetermined. If it needs to go to multiple places, then you need to send the message out multiple times separately.
	
	
	pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_MAIN;//default to MAIN, as you don't want just any data leaking out to CMNC (data security)

	sec_comm_cmnc_main_navi_destination_selection = ROVERCOMM_MAIN;//default to MAIN, as you don't want just any data leaking out to CMNC (data security)
	
	
	auto_AUXI_to_CMNC_data_array[] = {
		VOLTAGE_7D2_ACTUAL_STATUS,
		CURRENT_7D2_PRESW25A_ACTUAL_STATUS,
		CURRENT_7D2_SW12D5A_ACTUAL_STATUS,
		PHOTOSENSOR_BEACONCCA_LEFTSIDE_LEFTPOINTING_ACTUAL_STATUS,
		PHOTOSENSOR_GPSCCA_REARSIDE_UPWARDPOINTING_ACTUAL_STATUS,
		TEMPSENSOR_BEACONCCA_CENTERSIDE_ACTUAL_STATUS,
		TEMPSENSOR_POWERCCA_CENTERSIDE_MTRMOSFET_ACTUAL_STATUS,
		VOLTAGE_5_ANALOGCCA_ACTUAL_STATUS,
		CURRENT_3D3_SW12D5A_ACTUAL_STATUS,
		PHOTOSENSOR_BEACONCCA_CENTERSIDE_UPWARDPOINTING_ACTUAL_STATUS,
		PHOTOSENSOR_BEACONCCA_REARSIDE_REARPOINTING_ACTUAL_STATUS,
		PHOTOSENSOR_BEACONCCA_LEFTSIDE_UPWARDPOINTING_ACTUAL_STATUS,
		TEMPSENSOR_CURRENTCCA_CENTERSIDE_POWERRESISTOR_ACTUAL_STATUS,
		TEMPSENSOR_DIGITALCCA_MIDDLESIDE_ACTUAL_STATUS,
		VOLTAGE_3D3_SW_ACTUAL_STATUS,
		CURRENT_MOTORCTRLR_CH1_12D5A_ACTUAL_STATUS,
		PHOTOSENSOR_BEACONCCA_FRONTSIDE_FORWARDPOINTING_ACTUAL_STATUS,
		PHOTOSENSOR_CURRENTCCA_CENTERSIDE_UPWARDPOINTING_MIDDLEDECK_ACTUAL_STATUS,
		PHOTOSENSOR_POWERCCA_LEFTSIDE_LEFTPOINTING_ACTUAL_STATUS,
		TEMPSENSOR_GPSCCA_REARSIDE_UPPERDECK_ACTUAL_STATUS,
		GAS_BEACONCCA_RIGHTPOINTING_ACTUAL_STATUS,
		CURRENT_MOTORCTRLR_CH2_12D5A_ACTUAL_STATUS,
		PHOTOSENSOR_BEACONCCA_RIGHTSIDE_RIGHTPOINTING_ACTUAL_STATUS,
		PHOTOSENSOR_CURRENTCCA_FRONTUPWARDPOINTING_MIDDLEDECK_ACTUAL_STATUS,
		PHOTOSENSOR_DIGITALCCA_LEFTSIDE_UPWARDPOINTING_ACTUAL_STATUS,
		TEMPSENSOR_POWERCCA_FRONTSIDE_CHARGER_SOLAR_OR_GATE_ACTUAL_STATUS,
		HEADING_STATUS,
		ROLL_STATUS,
		PITCH_STATUS,
		YAW_STATUS,
		CURRENT_FAULT_1_7D2V_25A_PRESW_STATUS,
		CURRENT_FAULT_2_3D3V_12D5A_SW_STATUS,
		CURRENT_FAULT_3_MCTRLRCH1_12D5A_STATUS,
		CURRENT_FAULT_4_MCTRLRCH2_12D5A_STATUS,
		CURRENT_FAULT_5_7D2_12D5A_SW_STATUS
	}// add more as needed
	auto_AUXI_to_CMNC_data_cnt = 0 //data counter
	auto_AUXI_to_COMM_data_array[] = {
	}
	auto_AUXI_to_COMM_data_cnt = 0 //data counter		
	auto_AUXI_to_MAIN_data_array[] = {		
	}
	auto_AUXI_to_MAIN_data_cnt = 0 //data counter
	auto_AUXI_to_NAVI_data_array[] = {
		HEADING_STATUS
	}
	auto_AUXI_to_NAVI_data_cnt = 0 //data counter	
	transmission_delay_cnt = 0;//concurrent transmission delay counter
	first_transmission = true
	main_system_ready = false
	sync_error = false
	generic_system_error = false
	error_origin = ROVERCOMM_NONE
	invalid_state_or_mode_error = false
	health_error = false
	timeout_counter = 0 //shared counter, used to detect timeout of MAIN responding back to COMM for any reason (i.e. system go or system ready responses), error timeouts, etc. Make sure to clear it out before use and only use it for one purpose at a time.
	enable_left_laser = false
	enable_right_laser = false
	left_laser_prev_state = false //used to save the last state the left laser was on before turning it off to go to sleep
	right_laser_prev_state = false //used to save the last state the right laser was on before turning it off to go to sleep


	//Note: Remember MAIN currently only receives and processes generic system error and generic health errors. Also it can't redirect in some modes (i.e. SYNCHRONIZATION) so sending it an error (i.e. sync error) won't do any good.
	




	RUN_HOUSEKEEPING_TASKS
		POWER_ON_AND_HW_RESET
			run POR tasks
			Set mode to INITIALIZATION *begin*
			Go to whatever the next state is
				(still is Next State: RUN_HOUSEKEEPING_TASKS)		
		INITIALIZATION
			run initialization tasks
				initialize/reinitialize all variables
				i.e. clear system go flag
			start background tasks
			//Note: Lasers are turned off in the variable initial declarations above
			Set mode to SYNCHRONIZATION *begin*
			//initialize/reset shared counter before use
			timeout_counter = 0;
			Set next state to RX_COMMUNICATIONS
			Go to whatever the next state is
				(now just set to RX_COMMUNICATIONS)
		SYNCHRONIZATION			
			run background tasks
			Go to whatever the next state is
		NORMAL_OPERATIONS	
			run background tasks
			Go to whatever the next state is	
		SYSTEM_SLEEPING
			run background tasks
			Go to whatever the next state is	
		SYSTEM_WAKING
			run background tasks
			Go to whatever the next state is			
		SW_RESETTING
			run background tasks
			Go to whatever the next state is				
		SYSTEM_ERROR	
			run background tasks
			Go to whatever the next state is		
	RX_COMMUNICATIONS
		POWER_ON_AND_HW_RESET
			do nothing
		INITIALIZATION
			do nothing
		SYNCHRONIZATION	
			rxData() from PC_USB
			rxData() from MAIN
			Mode: SYNCHRONIZATION
			set next state to DATA_VALIDATION
			go to RUN_HOUSEKEEPING_TASKS		
		NORMAL_OPERATIONS	
			rxData() from PC_USB
			rxData() from MAIN
			Mode: NORMAL_OPERATIONS
			set next state to DATA_VALIDATION
			go to RUN_HOUSEKEEPING_TASKS	
		SYSTEM_SLEEPING
			do nothing	
		SYSTEM_WAKING
			do nothing
		SW_RESETTING
			do nothing
		SYSTEM_ERROR	
			rxData() from PC_USB
			rxData() from MAIN
			Mode: SYSTEM_ERROR
			set next state to DATA_VALIDATION
			go to RUN_HOUSEKEEPING_TASKS			
	DATA_VALIDATION
		POWER_ON_AND_HW_RESET
			do nothing
		INITIALIZATION
			do nothing
		SYNCHRONIZATION		
			parseAndValidateData() from PC_USB
			parseAndValidateData() from MAIN
			Mode: SYNCHRONIZATION
			set next state to DATA_FILTER
			go to RUN_HOUSEKEEPING_TASKS			
		NORMAL_OPERATIONS	
			parseAndValidateData() from PC_USB
			parseAndValidateData() from MAIN
			Mode: NORMAL_OPERATIONS
			set next state to DATA_FILTER
			go to RUN_HOUSEKEEPING_TASKS			
		SYSTEM_SLEEPING
			do nothing	
		SYSTEM_WAKING
			do nothing			
		SW_RESETTING
			do nothing	
		SYSTEM_ERROR	
			parseAndValidateData() from PC_USB
			parseAndValidateData() from MAIN
			Mode: SYSTEM_ERROR
			set next state to DATA_FILTER
			go to RUN_HOUSEKEEPING_TASKS			
	DATA_FILTER
		POWER_ON_AND_HW_RESET
			do nothing
		INITIALIZATION
			do nothing
		SYNCHRONIZATION
			Note: There are no redirections for the AUXI Arduino since it is a node at the end of the network tree.
			Allow all data from PC_USB (it's a debugging communication/backdoor to run tests, but use with caution)
			filter and throw away all MAIN data except:
				system ready message(s) from MAIN
				system go message(s) from MAIN
				sw reset requests message(s) from MAIN
				generic system errors
			Mode: SYNCHRONIZATION
			set next state to SYSTEM_HEALTH
			go to RUN_HOUSEKEEPING_TASKS				
		NORMAL_OPERATIONS	
			Note: There are no redirections for the AUXI Arduino since it is a node at the end of the network tree.
			Allow all data from PC_USB (it's a debugging communication/backdoor to run tests, but use with caution)
			filter MAIN data
				throw away any data not meant for AUXI				
			Mode: NORMAL_OPERATIONS
			set next state to READ_INPUTS
			go to RUN_HOUSEKEEPING_TASKS		
		SYSTEM_SLEEPING
			do nothing		
		SYSTEM_WAKING
			do nothing	
		SW_RESETTING
			do nothing
		SYSTEM_ERROR	
			Note: There are no redirections for the AUXI Arduino since it is a node at the end of the network tree.
			Allow all data from PC_USB (it's a debugging communication/backdoor to run tests, but use with caution)
			filter and throw away all MAIN data except:
				//Note: There is no hw reset requests for AUXI. It would have to be done by COMM.
				SW reset requests message(s) from MAIN
				Any of the status requests (i.e. Get 7.2V (Actual) Status, etc.)
				generic system errors
			Mode: SYSTEM_ERROR
			set next state to READ_INPUTS
			go to RUN_HOUSEKEEPING_TASKS		
	READ_INPUTS
		POWER_ON_AND_HW_RESET
			do nothing
		INITIALIZATION
			do nothing		
		SYNCHRONIZATION			
			do nothing		
		NORMAL_OPERATIONS		
			read imu sensor
			Mode: NORMAL_OPERATIONS
			set next state to SYSTEM_HEALTH
			go to RUN_HOUSEKEEPING_TASKS						
		SYSTEM_SLEEPING
			do nothing		
		SYSTEM_WAKING
			do nothing		
		SW_RESETTING
			do nothing	
		SYSTEM_ERROR	
			read imu sensor
			Mode: SYSTEM_ERROR
			set next state to SYSTEM_HEALTH
			go to RUN_HOUSEKEEPING_TASKS		
	SYSTEM_HEALTH			
		POWER_ON_AND_HW_RESET
			do nothing
		INITIALIZATION
			do nothing
		SYNCHRONIZATION		
			read all analog signals
				Note: For the analog muxes, the inputs raw voltages are read and the output controls are created in one combined state, the SYSTEM_HEALTH state, instead of the separate READ_INPUTS and CONTROL_OUTPUTS states.			
			read current faults (digital signal)
			Convert all analog signals to respective units.
			Determine health status (detect any errors or anomalies)
				If any health errors (since it's just in the SYNCHRONIZATION mode), send a generic health error to MAIN.
					main_pri_msg_queue = GENERIC_HEALTH_STATUS_ERROR //will be processed by MAIN and also resent to COMM and NAVI
					pc_usb_msg_queue = GENERIC_HEALTH_STATUS_ERROR //send error out through the PC_USB for debugging
					
					pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_MAIN
					
					//Note: MAIN will turn off the motor enable when it gets a GENERIC_HEALTH_STATUS_ERROR
					//Note: NAVI will shut off the LEDs when it gets a GENERIC_HEALTH_STATUS_ERROR
					Set mode to SYSTEM_ERROR *begin*
					error_origin = ROVERCOMM_AUXI
					set health_error = true
						(Note: the health_error flag can only be cleared with a sw reset, hw reset, or for health_errors, when the error goes away)					
					//Turn off Lasers (just in case they're not already off)
					Set enable_left_laser = false
					Set enable_right_laser = false
					//initialize/reset shared counter before use
					timeout_counter = 0;			
				else//everything is okay			
					Mode: SYNCHRONIZATION
					set next state to PROCESS_DATA
					go to RUN_HOUSEKEEPING_TASKS			
				end if
		NORMAL_OPERATIONS						
			read all analog signals
				Note: For the analog muxes, the inputs raw voltages are read and the output controls are created in one combined state, the SYSTEM_HEALTH state, instead of the separate READ_INPUTS and CONTROL_OUTPUTS states.			
			read current faults (digital signal)
			Convert all analog signals to respective units.
			Determine health status (detect any errors or anomalies)
			If any health errors, send a generic health error to MAIN.
				main_pri_msg_queue = GENERIC_HEALTH_STATUS_ERROR //will be processed by MAIN and also resent to COMM and NAVI
				pc_usb_msg_queue = GENERIC_HEALTH_STATUS_ERROR //send error out through the PC_USB for debugging				
				//Note: MAIN will turn off the motor enable when it gets a GENERIC_HEALTH_STATUS_ERROR
				//Note: NAVI will shut off the LEDs when it gets a GENERIC_HEALTH_STATUS_ERROR
				//also prioritize and send out the worst error
				main_sec_msg_queue == <output the corresponding health error, based on highest priority> //Destination CMNC, will be sent to MAIN then COMM for for possible redirect to CMNC (if the link is secure)
				
				pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_MAIN
				sec_comm_cmnc_main_navi_destination_selection = ROVERCOMM_CMNC
				
				Set mode to SYSTEM_ERROR *begin*
				error_origin = ROVERCOMM_AUXI
				set health_error = true
					(Note: the health_error flag can only be cleared with a sw reset, hw reset, or for health_errors, when the error goes away)	
				//Turn off Lasers
				Set enable_left_laser = false
				Set enable_right_laser = false				
				//initialize/reset shared counter before use
				timeout_counter = 0;
			else//everything is okay			
				Mode: NORMAL_OPERATIONS
				set next state to PROCESS_DATA
				go to RUN_HOUSEKEEPING_TASKS			
			end if
		SYSTEM_SLEEPING
			do nothing	
		SYSTEM_WAKING
			do nothing	
		SW_RESETTING
			do nothing	
		SYSTEM_ERROR
			//Note: If it already has a health_error, this will create the messages since it was cleared after TX_COMMUNICATIONS
			read all analog signals
				Note: For the analog muxes, the inputs raw voltages are read and the output controls are created in one combined state, the SYSTEM_HEALTH state, instead of the separate READ_INPUTS and CONTROL_OUTPUTS states.			
			read current faults (digital signal)
			Convert all analog signals to respective units.
			Determine health status (detect any errors or anomalies)
			If  health_error == true // any health errors, recreate/regenerate and send a generic health error to MAIN.
			
			
				main_pri_msg_queue = GENERIC_HEALTH_STATUS_ERROR //will be processed by MAIN and also resent to COMM and NAVI
			

				pc_usb_msg_queue = GENERIC_HEALTH_STATUS_ERROR //send error out through the PC_USB for debugging
				
				
				
				//Note: MAIN will turn off the motor enable when it gets a GENERIC_HEALTH_STATUS_ERROR
				//Note: NAVI will shut off the LEDs when it gets a GENERIC_HEALTH_STATUS_ERROR
				//also prioritize and send out the worst error
				main_sec_msg_queue == <output the corresponding health error, based on highest priority> //Destination CMNC, will be sent to MAIN then COMM for for possible redirect to CMNC (if the link is secure)
				
				pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_MAIN
				sec_comm_cmnc_main_navi_destination_selection = ROVERCOMM_CMNC
				
				
				Mode: SYSTEM_ERROR											
				set health_error = true
					(Note: the health_error flag can only be cleared with a sw reset, hw reset, or for health_errors, when the error goes away)
				//Turn off Lasers
				set enable_left_laser = false
				set enable_right_laser = false				
				//initialize/reset shared counter before use
				timeout_counter = 0;
				Note: The health error supercedes other errors. So it take over the error messages, etc.
			else //if there was no health error
				if health_error == true && sync_error == false //and if there use to be a health error and it was the only error.
					//Note: List all other error flags in the if statement above
					Set health_error = false //clear the health error since the health error went away
					//initialize/reset shared counter before use
					timeout_counter = 0;	
					Mode: NORMAL_OPERATIONS *begin* //go back to Normal Operations since the health error cleared itself
					set next state to PROCESS_DATA
					go to RUN_HOUSEKEEPING_TASKS	
				else //there wasn't a health error (meaning it was in the SYSTEM_ERROR for another reason) or there used to be a health_error and that cleared up but there are still other error(s) (i.e. sync_error)
					Mode: SYSTEM_ERROR
					set next state to PROCESS_DATA
					go to RUN_HOUSEKEEPING_TASKS	
				endif				
			end if	
	PROCESS_DATA
		POWER_ON_AND_HW_RESET
			do nothing
		INITIALIZATION
			do nothing	
		SYNCHRONIZATION
			Categorize all commands/data from all sources.					
			Sort based on priority.
			Allow for all non-conflicting commands to run.
			Then only run the highest priority functions for AUXI last, so it will overwrite anything else, right before state transition.
			

			skip imu sensor
			
			
			//Set pri_comm_cmnc_main_navi_destination_selection as needed if the destination needs to be COMM, CMNC, or NAVI instead of the default MAIN.
			
			//Set sec_comm_cmnc_main_navi_destination_selection as needed if the destination needs to be COMM, CMNC, or NAVI instead of the default MAIN.
						
			
			Process PC_USB command/data to see if it has priority or is non-conflicting (see "Command Options" below for more info)
				No redirections with the AUXI Arduino.
				All other messages are allowed from PC_USB. Use with caution.						
			Process MAIN command/data to see if it has priority or is non-conflicting (see "Command Options" below for more info)
			Note: Either you should get no data, sw reset, generic system errors, or system ready or system go message(s) from MAIN. as everything else was filtered out.

			//Run lower priority functions here. (i.e. system ready msgs)
			
			If !(system go msg received, check system go flag from MAIN aka can be system ready or no msg)
				main_pri_msg_queue = SYSTEM_READY_STATUS (tells MAIN it's ready to synchronize)
				
				pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_MAIN
				
			end if
			Note: If system go or system ready msg has been received from MAIN, see "Command Options" below for more info.

			//Run highest priority functions here. //this will override any lower priority messages (i.e. system go). This will overwrite anything else. (i.e. system ready)
				
			
			If no system go msg from MAIN received && main_system_ready == false (MAIN system not ready yet to set the main_system_ready flag and have not received a system go to switch states yet, then keep incrementing the timeout counter)
				timeout_counter++
				if timeout_counter >= AUXI_SYNC_TIMEOUT_VALUE
					Set mode to SYSTEM_ERROR *begin*
					error_origin = ROVERCOMM_AUXI
					main_pri_msg_queue = GENERIC_SYSTEM_ERROR //send a generic system error to main which will send a copy to cmnc as well (MAIN only accepts generic health and generic system errors at the moment. Also only generic health and generic system errors are usually left unfiltered in many states like SYNCHRONIZATION. else you have to send a message that should redirect to cmnc directly, but it would bypass MAIN and won't error MAIN out. Sometimes you want MAIN to error out on any error.)
					pc_usb_msg_queue = SYNC_ERROR_STATUS //send error out through the PC_USB for debugging
					
					pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_MAIN
					
					set sync_error = true
						(Note: the sync_error flag can only be cleared with a sw reset or hw reset)							
					//Turn off Lasers
					Set enable_left_laser = false
					Set enable_right_laser = false				
					//initialize/reset shared counter before use
					timeout_counter = 0;
				end if
			end if								
			
			Unless overridden,
				set next state to CONTROL_OUTPUTS								
			Unless overridden,						
				Mode: SYNCHRONIZATION
			go to RUN_HOUSEKEEPING_TASKS				
		NORMAL_OPERATIONS	
		
		
			process IMU data (calculate heading)
			

			Categorize all commands/data from all sources.
			Allow for all non-conflicting commands to run.
			Sort based on priority.
			Then only run the highest priority for AUXI.

			
			//Set pri_comm_cmnc_main_navi_destination_selection as needed if the destination needs to be COMM, CMNC, or NAVI instead of the default MAIN.
			
			//Set sec_comm_cmnc_main_navi_destination_selection as needed if the destination needs to be COMM, CMNC, or NAVI instead of the default MAIN.
			
			
			Process PC_USB command/data to see if it has priority or is non-conflicting (see "Command Options" below for more info)
				No redirections with the AUXI Arduino.
				All other messages are allowed from PC_USB. Use with caution.						
			Process MAIN command/data to see if it has priority or is non-conflicting (see "Command Options" below for more info)						
				All messages are allowed from MAIN.
			
			//Run lower priority functions here.
													
			//Run highest priority functions here. //this will override any lower priority messages
				

			Unless overridden,
				set next state to CONTROL_OUTPUTS					
			Unless overridden,						
				Mode: NORMAL_OPERATIONS
			go to RUN_HOUSEKEEPING_TASKS	
		SYSTEM_SLEEPING
			do nothing			
		SYSTEM_WAKING
			do nothing	
		SW_RESETTING
			do nothing		
		SYSTEM_ERROR		
			process IMU data (calculate heading)
			

			Categorize all commands/data from all sources.
			Allow for all non-conflicting commands to run.
			Sort based on priority.
			Then only run the highest priority for AUXI.
				

			//Set pri_comm_cmnc_main_navi_destination_selection as needed if the destination needs to be COMM, CMNC, or NAVI instead of the default MAIN.
			
			//Set sec_comm_cmnc_main_navi_destination_selection as needed if the destination needs to be COMM, CMNC, or NAVI instead of the default MAIN.
			
			
			Process PC_USB command/data to see if it has priority or is non-conflicting (see "Command Options" below for more info)
				No redirections with the AUXI Arduino.
				All other messages are allowed from PC_USB. Use with caution.						
			Process MAIN command/data to see if it has priority or is non-conflicting (see "Command Options" below for more info)						
				Note: Either you should get SW reset requests, any status requests, or generic system errors. as everything else was filtered out				
														
			//Run lower priority functions here.

			//Recreate/regenerate any error messages (but allow them to be overwritten by higher priority messages)
			if health_error == false (because if health_error == true, let it send it's message that was created in SYSTEM_HEALTH and don't override it with any of the errors below since they are lower priority than a health_error)
				if sync_error
					pc_usb_msg_queue = SYNC_ERROR_STATUS //send error out through the PC_USB for debugging
	
					if( error_origin != ROVERCOMM_MAIN)//Make sure don't send it back to itself to avoid an infinite loop
					{
						main_pri_msg_queue = CMD_TAG_GENERIC_SYSTEM_ERROR_STATUS;//send a generic system error to main which will send a copy to cmnc as well (MAIN only accepts generic health and generic system errors at the moment. Also only generic health and generic system errors are usually left unfiltered in many states like SYNCHRONIZATION. else you have to send a message that should redirect to cmnc directly, but it would bypass MAIN and won't error MAIN out. Sometimes you want MAIN to error out on any error.)
						
						pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_MAIN
						
					}//end if					
									
					
					(Note: the sync_error flag can only be cleared with a sw reset or hw reset)					
				else if invalid_state_or_mode_error

					pc_usb_msg_queue = INVALID_STATE_OR_MODE_ERROR_STATUS					
					

					if( error_origin != ROVERCOMM_MAIN)//Make sure don't send it back to itself to avoid an infinite loop
					{
						main_pri_msg_queue = INVALID_STATE_OR_MODE_ERROR_STATUS;//with CMNC as the destination		
						
						pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_MAIN						
						
					}//end if

					
					(Note: the invalid_state_or_mode_error flag can only be cleared with a sw reset or hw reset)				
				else if generic_system_error
					pc_usb_msg_queue = GENERIC_SYSTEM_ERROR //send error out through the PC_USB for debugging
					
					if( error_origin != ROVERCOMM_MAIN)//Make sure don't send it back to itself to avoid an infinite loop
					{
						main_pri_msg_queue = CMD_TAG_GENERIC_SYSTEM_ERROR_STATUS;//send a generic system error to main which will send a copy to cmnc as well (MAIN only accepts generic health and generic system errors at the moment. Also only generic health and generic system errors are usually left unfiltered in many states like SYNCHRONIZATION. else you have to send a message that should redirect to cmnc directly, but it would bypass MAIN and won't error MAIN out. Sometimes you want MAIN to error out on any error.)
						
						pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_MAIN
						
						
					}//end if		
					
				else//default: set to generic_system_error
					Set generic_system_error = true
					
					pc_usb_msg_queue = GENERIC_SYSTEM_ERROR //send error out through the PC_USB for debugging

					if( error_origin != ROVERCOMM_MAIN)//Make sure don't send it back to itself to avoid an infinite loop
					{
						main_pri_msg_queue = CMD_TAG_GENERIC_SYSTEM_ERROR_STATUS;//send a generic system error to main which will send a copy to cmnc as well (MAIN only accepts generic health and generic system errors at the moment. Also only generic health and generic system errors are usually left unfiltered in many states like SYNCHRONIZATION. else you have to send a message that should redirect to cmnc directly, but it would bypass MAIN and won't error MAIN out. Sometimes you want MAIN to error out on any error.)
						
						pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_MAIN
						
					}//end if							
					
				end if					
					
								
			//Run highest priority functions here. //this will override any lower priority messages

			Process PC_USB command/data to see if it has priority or is non-conflicting (see "Command Options" below for more info)
				No redirections with the AUXI Arduino.
				All other messages are allowed from PC_USB. Use with caution.						
			Process MAIN command/data to see if it has priority or is non-conflicting (see "Command Options" below for more info)						
					Note: Should only be SW requests, or any of the statuses (i.e. Get 7.2V (Actual) Status, etc.) . Anything else is filtered out.
			

			Unless overridden,
				set next state to CONTROL_OUTPUTS					
			Unless overridden,						
				Mode: SYSTEM_ERROR
			go to RUN_HOUSEKEEPING_TASKS	
			
	CONTROL_OUTPUTS			
		POWER_ON_AND_HW_RESET
			do nothing
		INITIALIZATION
			do nothing		
		SYNCHRONIZATION
			//Control the lasers
			Since enable_left_laser == false
				turn off the left laser
			Since enable_right_laser == false
				turn off the right laser			
			Mode: SYNCHRONIZATION
			set next state to CREATE_DATA
			go to RUN_HOUSEKEEPING_TASKS			
		NORMAL_OPERATIONS			
			//Control the lasers
			if enable_left_laser
				turn on the left laser
			else
				turn off the left laser
			end if				
			if enable_right_laser
				turn on the right laser
			else
				turn off the right laser
			end if	
			Mode: NORMAL_OPERATIONS					
			set next state to CREATE_DATA					
			go to RUN_HOUSEKEEPING_TASKS					
		SYSTEM_SLEEPING
			//Control the lasers
			Since enable_left_laser == false
				turn off the left laser
			Since enable_right_laser == false
				turn off the right laser			
			Mode: SYSTEM_SLEEPING
			set next state to CREATE_DATA
			go to RUN_HOUSEKEEPING_TASKS					
		SYSTEM_WAKING
			//Control the lasers
			if enable_left_laser
				turn on the left laser
			else
				turn off the left laser
			end if				
			if enable_right_laser
				turn on the right laser
			else
				turn off the right laser
			end if	
			Set mode to SYNCHRONIZATION *begin*
			//initialize/reset shared counter before use
			timeout_counter = 0;
			set next state to RX_COMMUNICATIONS
			go to RUN_HOUSEKEEPING_TASKS				
		SW_RESETTING
			//Control the lasers
			Since enable_left_laser == false
				turn off the left laser
			Since enable_right_laser == false
				turn off the right laser			
			Mode: SW_RESETTING
			set next state to CREATE_DATA
			go to RUN_HOUSEKEEPING_TASKS					
		SYSTEM_ERROR	
			//Control the lasers
			Since enable_left_laser == false
				turn off the left laser
			Since enable_right_laser == false
				turn off the right laser			
			Mode: SYSTEM_ERROR
			set next state to CREATE_DATA
			go to RUN_HOUSEKEEPING_TASKS						
	CREATE_DATA
		POWER_ON_AND_HW_RESET
			do nothing
		INITIALIZATION
			do nothing		
		SYNCHRONIZATION		
			//PC_USB
			if pc_usb_msg_queue != CMD_TAG_NO_MSG
				create any msg(s) for PC_USB as needed based on pc_usb_msg_queue		
			endif		
			
			
			if main_pri_msg_queue != CMD_TAG_NO_MSG//Since main_pri_msg_queue == SYSTEM_READY_STATUS (the AUXI, aka this arduino, is up and running, so let MAIN know)

			
				if(pri_comm_cmnc_main_navi_destination_selection == ROVERCOMM_COMM)//This code should not execute when in SYNCHRONIZATION. Just have it there for consistency.
					create system ready msg for COMM (this code should not execute, since it is not really used by COMM)
				
				else if(pri_comm_cmnc_main_navi_destination_selection == ROVERCOMM_CMNC)//This code should not execute when in SYNCHRONIZATION. Just have it there for consistency.
					create system ready msg for CMNC (this code should not execute, since it is not really used by CMNC)
				
				
				//And since pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_MAIN
				else if(pri_comm_cmnc_main_navi_destination_selection == ROVERCOMM_MAIN)
					create system ready msg for MAIN (tells MAIN it's ready to synchronize)
										
										
				else if(pri_comm_cmnc_main_navi_destination_selection == ROVERCOMM_NAVI)//This code should not execute when in SYNCHRONIZATION. Just have it there for consistency.
					create system ready msg for NAVI (this code should not execute, since it is not really used by NAVI)
					
				else
					Send error message. As it's an unknown destination.
				end else
					
			end if
			
								
			skip auto data for SYNCHRONIZATION
						
			skip second message queue for SYNCHRONIZATION
			
						
							
			Mode: SYNCHRONIZATION
			set next state to TX_COMMUNICATIONS						
			go to RUN_HOUSEKEEPING_TASKS				
		NORMAL_OPERATIONS
			//PC_USB
			if pc_usb_msg_queue != CMD_TAG_NO_MSG
				create any msg(s) for PC_USB as needed based on pc_usb_msg_queue		
			endif		
			//Send up to two auto datas between the two queues (primary and secondary)
			if main_pri_msg_queue != CMD_TAG_NO_MSG
		
				
				if(pri_comm_cmnc_main_navi_destination_selection == ROVERCOMM_COMM)
					create any msg(s) for COMM as needed based on main_pri_msg_queue			
					
				if(pri_comm_cmnc_main_navi_destination_selection == ROVERCOMM_MAIN)
					create any msg(s) for MAIN as needed based on main_pri_msg_queue			
						
				else if(pri_comm_cmnc_main_navi_destination_selection == ROVERCOMM_CMNC)
					create any msg(s) for CMNC as needed based on main_pri_msg_queue					
					
				else if(pri_comm_cmnc_main_navi_destination_selection == ROVERCOMM_NAVI)
					create any msg(s) for NAVI as needed based on main_pri_msg_queue					
					
				else
					Send error message. As it's an unknown destination.
				end else

							
				
			else //since there is no custom data for the primary queue, then send the next auto data										
								
			
				//Since this is a shared data channel, create message corresponding to the next auto data for CMNC, COMM, MAIN, then for NAVI
				
				
				if( auto_AUXI_to_COMM_data_cnt < sizeof(auto_AUXI_to_COMM_data_array) )
					//if there is auto data for COMM and it has not been all sent yet
					//Note: Since the counter is a byte, it's lowest value is 0. And the array size can't be smaller than zero. So this can only be true if the array has data, i.e. it's size is greater than 0 and the counter is less than the size of the array. If the array is empty, the size would be 0 and the counter's lowest value would be 0, so it would be equal and not less than, so the if statement would be still false.
				
					main_pri_msg_queue = auto_AUXI_to_COMM_data_array[auto_AUXI_to_COMM_data_cnt]
					
					//set the next auto data for COMM for the next loop
					auto_AUXI_to_COMM_data_cnt++
					
					pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_COMM//set destination to COMM						
					
				end else if			
				else if( auto_AUXI_to_CMNC_data_cnt < sizeof(auto_AUXI_to_CMNC_data_array) )
					//if there is auto data for CMNC and it has not been all sent yet
					//Note: Since the counter is a byte, it's lowest value is 0. And the array size can't be smaller than zero. So this can only be true if the array has data, i.e. it's size is greater than 0 and the counter is less than the size of the array. If the array is empty, the size would be 0 and the counter's lowest value would be 0, so it would be equal and not less than, so the if statement would be still false.
				
					main_pri_msg_queue = auto_AUXI_to_CMNC_data_array[auto_AUXI_to_CMNC_data_cnt]
					
					//set the next auto data for CMNC for the next loop
					auto_AUXI_to_CMNC_data_cnt++
					
					pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_CMNC//set destination to CMNC
					
					
				end else if		
				else if( auto_AUXI_to_MAIN_data_cnt < sizeof(auto_AUXI_to_MAIN_data_array) )
					//if there is auto data for MAIN and it has not been all sent yet
					//Note: Since the counter is a byte, it's lowest value is 0. And the array size can't be smaller than zero. So this can only be true if the array has data, i.e. it's size is greater than 0 and the counter is less than the size of the array. If the array is empty, the size would be 0 and the counter's lowest value would be 0, so it would be equal and not less than, so the if statement would be still false.
				
					main_pri_msg_queue = auto_AUXI_to_MAIN_data_array[auto_AUXI_to_MAIN_data_cnt]
					
					//set the next auto data for MAIN for the next loop
					auto_AUXI_to_MAIN_data_cnt++
					
					pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_MAIN//set destination to MAIN						
					
				end else if						
				else if( auto_AUXI_to_NAVI_data_cnt < sizeof(auto_AUXI_to_NAVI_data_array) )
					//if there is auto data for AUXI and it has not been all sent yet
					//Note: Since the counter is a byte, it's lowest value is 0. And the array size can't be smaller than zero. So this can only be true if the array has data, i.e. it's size is greater than 0 and the counter is less than the size of the array. If the array is empty, the size would be 0 and the counter's lowest value would be 0, so it would be equal and not less than, so the if statement would be still false.
				
					main_pri_msg_queue = auto_AUXI_to_NAVI_data_array[auto_AUXI_to_NAVI_data_cnt]
					
					//set the next auto data for AUXI for the next loop
					auto_AUXI_to_NAVI_data_cnt++
					
					pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_AUXI//set destination to AUXI						
					
				end else if				
				//else do nothing since there was no message and no auto data to send
				end if	
				
			end if
			if main_sec_msg_queue != CMD_TAG_NO_MSG
			
				if(sec_comm_cmnc_main_auxi_destination_selection == ROVERCOMM_COMM)//This code should not execute. Just have it there for consistency.
					create any msg(s) for COMM as needed based on main_sec_msg_queue					
					
				if(sec_comm_cmnc_main_auxi_destination_selection == ROVERCOMM_CMNC)//This code should not execute. Just have it there for consistency.
					create any msg(s) for CMNC as needed based on main_sec_msg_queue					
					
				else if(sec_comm_cmnc_main_navi_destination_selection == ROVERCOMM_MAIN)
					create any msg(s) for MAIN as needed based on main_sec_msg_queue
				
				else if(sec_comm_cmnc_main_navi_destination_selection == ROVERCOMM_NAVI)//This code should not execute. Just have it there for consistency.
					create any msg(s) for NAVI as needed based on main_sec_msg_queue	
				else
					Send error message. As it's an unknown destination.
				end else
				
				
			else //since there is no custom data for the secondary queue, then send the next auto data										
			
				//Since this is a shared data channel, create message corresponding to the next auto data for CMNC, COMM, MAIN, then for NAVI

				if( auto_AUXI_to_COMM_data_cnt < sizeof(auto_AUXI_to_COMM_data_array) )
					//if there is auto data for COMM and it has not been all sent yet
					//Note: Since the counter is a byte, it's lowest value is 0. And the array size can't be smaller than zero. So this can only be true if the array has data, i.e. it's size is greater than 0 and the counter is less than the size of the array. If the array is empty, the size would be 0 and the counter's lowest value would be 0, so it would be equal and not less than, so the if statement would be still false.

					main_sec_msg_queue = auto_AUXI_to_COMM_data_array[auto_AUXI_to_COMM_data_cnt]
					
					//set the next auto data for COMM for the next loop
					auto_AUXI_to_COMM_data_cnt++
					
					sec_comm_cmnc_main_navi_destination_selection = ROVERCOMM_COMM//set destination to COMM						
					
				end else if				
				if( auto_AUXI_to_CMNC_data_cnt < sizeof(auto_AUXI_to_CMNC_data_array) )
					//if there is auto data for CMNC and it has not been all sent yet
					//Note: Since the counter is a byte, it's lowest value is 0. And the array size can't be smaller than zero. So this can only be true if the array has data, i.e. it's size is greater than 0 and the counter is less than the size of the array. If the array is empty, the size would be 0 and the counter's lowest value would be 0, so it would be equal and not less than, so the if statement would be still false.

					main_sec_msg_queue = auto_AUXI_to_CMNC_data_array[auto_AUXI_to_CMNC_data_cnt]
					
					//set the next auto data for CMNC for the next loop
					auto_AUXI_to_CMNC_data_cnt++
					
					sec_comm_cmnc_main_navi_destination_selection = ROVERCOMM_CMNC//set destination to CMNC
					
					
				end else if
				else if( auto_AUXI_to_MAIN_data_cnt < sizeof(auto_AUXI_to_MAIN_data_array) )
					//if there is auto data for MAIN and it has not been all sent yet
					//Note: Since the counter is a byte, it's lowest value is 0. And the array size can't be smaller than zero. So this can only be true if the array has data, i.e. it's size is greater than 0 and the counter is less than the size of the array. If the array is empty, the size would be 0 and the counter's lowest value would be 0, so it would be equal and not less than, so the if statement would be still false.

					main_sec_msg_queue = auto_AUXI_to_MAIN_data_array[auto_AUXI_to_MAIN_data_cnt]
					
					//set the next auto data for MAIN for the next loop
					auto_AUXI_to_MAIN_data_cnt++
					
					sec_comm_cmnc_main_navi_destination_selection = ROVERCOMM_MAIN//set destination to MAIN						
					
				end else if						
				else if( auto_AUXI_to_NAVI_data_cnt < sizeof(auto_AUXI_to_NAVI_data_array) )
					//if there is auto data for AUXI and it has not been all sent yet
					//Note: Since the counter is a byte, it's lowest value is 0. And the array size can't be smaller than zero. So this can only be true if the array has data, i.e. it's size is greater than 0 and the counter is less than the size of the array. If the array is empty, the size would be 0 and the counter's lowest value would be 0, so it would be equal and not less than, so the if statement would be still false.

					main_sec_msg_queue = auto_AUXI_to_NAVI_data_array[auto_AUXI_to_NAVI_data_cnt]
					
					//set the next auto data for AUXI for the next loop
					auto_AUXI_to_NAVI_data_cnt++
					
					sec_comm_cmnc_main_navi_destination_selection = ROVERCOMM_AUXI//set destination to AUXI						
					
				end else if				
				//else do nothing since there was no message and no auto data to send
				end if	

				


				//Once all the counters are equal to or greater than the size of the arrays (or even if the array is empty with size 0), reset all the counters)
				if (
					auto_AUXI_to_COMM_data_cnt >= sizeof(auto_AUXI_to_COMM_data_array) &&
					auto_AUXI_to_CMNC_data_cnt >= sizeof(auto_AUXI_to_CMNC_data_array) &&
					auto_AUXI_to_MAIN_data_cnt >= sizeof(auto_AUXI_to_MAIN_data_array) &&
					auto_AUXI_to_NAVI_data_cnt >= sizeof(auto_AUXI_to_NAVI_data_array)
					)
						auto_AUXI_to_COMM_data_cnt = 0;
						auto_AUXI_to_CMNC_data_cnt = 0;
						auto_AUXI_to_MAIN_data_cnt = 0;
						auto_AUXI_to_NAVI_data_cnt = 0;
				endif

				
			end if
			Mode: NORMAL_OPERATIONS
			set next state to TX_COMMUNICATIONS						
			go to RUN_HOUSEKEEPING_TASKS						
		SYSTEM_SLEEPING
			//PC_USB
			if pc_usb_msg_queue != CMD_TAG_NO_MSG
				create any msg(s) for PC_USB as needed based on pc_usb_msg_queue		
			endif		
			if main_pri_msg_queue != CMD_TAG_NO_MSG //Since main_pri_msg_queue = SYSTEM_IS_SLEEPING
			
				if(pri_comm_cmnc_main_navi_destination_selection == ROVERCOMM_COMM)//This code should not execute when in SYNCHRONIZATION. Just have it there for consistency.
					Create AUXI Sleeping Acknowledgement to COMM
				
				else if(pri_comm_cmnc_main_navi_destination_selection == ROVERCOMM_CMNC)//This code should not execute when in SYNCHRONIZATION. Just have it there for consistency.
					Create AUXI Sleeping Acknowledgement to CMNC
				
				else if(pri_comm_cmnc_main_navi_destination_selection == ROVERCOMM_MAIN)
					Create AUXI Sleeping Acknowledgement to MAIN
						

				else if(pri_comm_cmnc_main_navi_destination_selection == ROVERCOMM_NAVI)//This code should not execute when in SYNCHRONIZATION. Just have it there for consistency.
					Create AUXI Sleeping Acknowledgement to NAVI
					
				else
					Send error message. As it's an unknown destination.
				end else	
			endif
			
			skip auto data for SYSTEM_SLEEPING
						
			skip second message queue for SYSTEM_SLEEPING

			Mode: SYSTEM_SLEEPING
			set next state to TX_COMMUNICATIONS						
			go to RUN_HOUSEKEEPING_TASKS
		SYSTEM_WAKING
			do nothing	
		SW_RESETTING
			//PC_USB
			if pc_usb_msg_queue != CMD_TAG_NO_MSG
				create any msg(s) for PC_USB as needed based on pc_usb_msg_queue		
			endif		
			if main_pri_msg_queue != CMD_TAG_NO_MSG //Since main_pri_msg_queue = SW_IS_RESETTING
		
	
				if(pri_comm_cmnc_main_navi_destination_selection == ROVERCOMM_COMM)//This code should not execute when in SYNCHRONIZATION. Just have it there for consistency.
					Create AUXI SW Resetting Acknowledgement to COMM
				
				else if(pri_comm_cmnc_main_navi_destination_selection == ROVERCOMM_CMNC)//This code should not execute when in SYNCHRONIZATION. Just have it there for consistency.
					Create AUXI SW Resetting Acknowledgement to CMNC
				
				else if(pri_comm_cmnc_main_navi_destination_selection == ROVERCOMM_MAIN)
					Create AUXI SW Resetting Acknowledgement to MAIN
					
				else if(pri_comm_cmnc_main_navi_destination_selection == ROVERCOMM_NAVI)//This code should not execute when in SYNCHRONIZATION. Just have it there for consistency.
					Create AUXI SW Resetting Acknowledgement to NAVI
					
				else
					Send error message. As it's an unknown destination.
				end else						
			endif
			
			skip auto data for SW_RESETTING
						
			skip second message queue for SW_RESETTING			
			
			Mode: SW_RESETTING
			set next state to TX_COMMUNICATIONS						
			go to RUN_HOUSEKEEPING_TASKS
		SYSTEM_ERROR
			//PC_USB
			if pc_usb_msg_queue != CMD_TAG_NO_MSG
				create any msg(s) for PC_USB as needed based on pc_usb_msg_queue		
				
				For GENERIC_HEALTH_STATUS_ERROR, SYNC_ERROR_STATUS, GENERIC_SYSTEM_ERROR_STATUS, INVALID_STATE_OR_MODE_ERROR_STATUS, in createDataFromQueueFor, create the message using error_origin as the message origin
				
			endif		
			//Note: For SYSTEM_ERROR, still send auto data through main_sec_msg_queue, to be used for debugging
			//Send up to two auto datas between the two queues (primary and secondary)
			if main_pri_msg_queue != CMD_TAG_NO_MSG
					
				
				if(pri_comm_cmnc_main_navi_destination_selection == ROVERCOMM_COMM)//This code should not execute when in SYNCHRONIZATION. Just have it there for consistency.
					
					create any msg(s) for COMM as needed based on main_pri_msg_queue					
					i.e. create error msg for COMM about SYNC issues, health status issues, get statues (i.e. Get 7.2V (Actual) Status, etc.) etc.
				
				else if(pri_comm_cmnc_main_navi_destination_selection == ROVERCOMM_CMNC)//This code should not execute when in SYNCHRONIZATION. Just have it there for consistency.
					
					create any msg(s) for CMNC as needed based on main_pri_msg_queue					
					i.e. create error msg for CMNC about SYNC issues, health status issues, get statues (i.e. Get 7.2V (Actual) Status, etc.) etc.
				
				
				else if(pri_comm_cmnc_main_navi_destination_selection == ROVERCOMM_MAIN)
					create any msg(s) for MAIN as needed based on main_pri_msg_queue					
					i.e. create error msg for MAIN about SYNC issues, health status issues, get statues (i.e. Get 7.2V (Actual) Status, etc.) etc.
					
					
				else if(pri_comm_cmnc_main_navi_destination_selection == ROVERCOMM_NAVI)//This code should not execute when in SYNCHRONIZATION. Just have it there for consistency.
					
					create any msg(s) for NAVI as needed based on main_pri_msg_queue					
					i.e. create error msg for NAVI about SYNC issues, health status issues, get statues (i.e. Get 7.2V (Actual) Status, etc.) etc.
					
				else
					Send error message. As it's an unknown destination.
				end else						
			
				
				For GENERIC_SYSTEM_ERROR_STATUS,	GENERIC_HEALTH_STATUS_ERROR in createDataFromQueueFor, create the message using error_origin as the message origin

				For INVALID_STATE_OR_MODE_ERROR_STATUS, in createDataFromQueueFor, create the message using error_origin as the message origin and cmnc as the destination
				end if				
				
				
			else //since there is no custom data for the primary queue, then send the next auto data										

				//Since this is a shared data channel, create message corresponding to the next auto data for CMNC, COMM, MAIN, then for NAVI
				
				
				if( auto_AUXI_to_COMM_data_cnt < sizeof(auto_AUXI_to_COMM_data_array) )
					//if there is auto data for COMM and it has not been all sent yet
					//Note: Since the counter is a byte, it's lowest value is 0. And the array size can't be smaller than zero. So this can only be true if the array has data, i.e. it's size is greater than 0 and the counter is less than the size of the array. If the array is empty, the size would be 0 and the counter's lowest value would be 0, so it would be equal and not less than, so the if statement would be still false.
				
					main_pri_msg_queue = auto_AUXI_to_COMM_data_array[auto_AUXI_to_COMM_data_cnt]
					
					//set the next auto data for COMM for the next loop
					auto_AUXI_to_COMM_data_cnt++
					
					pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_COMM//set destination to COMM						
					
				end else if				
				else if( auto_AUXI_to_CMNC_data_cnt < sizeof(auto_AUXI_to_CMNC_data_array) )
					//if there is auto data for CMNC and it has not been all sent yet
					//Note: Since the counter is a byte, it's lowest value is 0. And the array size can't be smaller than zero. So this can only be true if the array has data, i.e. it's size is greater than 0 and the counter is less than the size of the array. If the array is empty, the size would be 0 and the counter's lowest value would be 0, so it would be equal and not less than, so the if statement would be still false.
				
					main_pri_msg_queue = auto_AUXI_to_CMNC_data_array[auto_AUXI_to_CMNC_data_cnt]
					
					//set the next auto data for CMNC for the next loop
					auto_AUXI_to_CMNC_data_cnt++
					
					pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_CMNC//set destination to CMNC
					
					
				end else if
			
				else if( auto_AUXI_to_MAIN_data_cnt < sizeof(auto_AUXI_to_MAIN_data_array) )
					//if there is auto data for MAIN and it has not been all sent yet
					//Note: Since the counter is a byte, it's lowest value is 0. And the array size can't be smaller than zero. So this can only be true if the array has data, i.e. it's size is greater than 0 and the counter is less than the size of the array. If the array is empty, the size would be 0 and the counter's lowest value would be 0, so it would be equal and not less than, so the if statement would be still false.
				
					main_pri_msg_queue = auto_AUXI_to_MAIN_data_array[auto_AUXI_to_MAIN_data_cnt]
					
					//set the next auto data for MAIN for the next loop
					auto_AUXI_to_MAIN_data_cnt++
					
					pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_MAIN//set destination to MAIN						
					
				end else if						
				else if( auto_AUXI_to_NAVI_data_cnt < sizeof(auto_AUXI_to_NAVI_data_array) )
					//if there is auto data for AUXI and it has not been all sent yet
					//Note: Since the counter is a byte, it's lowest value is 0. And the array size can't be smaller than zero. So this can only be true if the array has data, i.e. it's size is greater than 0 and the counter is less than the size of the array. If the array is empty, the size would be 0 and the counter's lowest value would be 0, so it would be equal and not less than, so the if statement would be still false.
				
					main_pri_msg_queue = auto_AUXI_to_NAVI_data_array[auto_AUXI_to_NAVI_data_cnt]
					
					//set the next auto data for AUXI for the next loop
					auto_AUXI_to_NAVI_data_cnt++
					
					pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_AUXI//set destination to AUXI						
					
				end else if				
				//else do nothing since there was no message and no auto data to send
				end if	
			
			end if
			if main_sec_msg_queue != CMD_TAG_NO_MSG
			
												
				if(sec_comm_cmnc_main_auxi_destination_selection == ROVERCOMM_COMM)//This code should not execute. Just have it there for consistency.
					create any msg(s) for COMM as needed based on main_sec_msg_queue
				
				else if(sec_comm_cmnc_main_auxi_destination_selection == ROVERCOMM_CMNC)//This code should not execute. Just have it there for consistency.
					create any msg(s) for CMNC as needed based on main_sec_msg_queue
				
				
				else if(sec_comm_cmnc_main_navi_destination_selection == ROVERCOMM_MAIN)
					create any msg(s) for MAIN as needed based on main_sec_msg_queue
				
				
				else if(sec_comm_cmnc_main_navi_destination_selection == ROVERCOMM_AUXI)//This code should not execute. Just have it there for consistency.
					create any msg(s) for AUXI as needed based on main_sec_msg_queue
					
				else
					Send error message. As it's an unknown destination.
				end else
			
			else //since there is no custom data for the secondary queue, then send the next auto data										

				//Since this is a shared data channel, create message corresponding to the next auto data for CMNC, COMM, MAIN, then for NAVI

				if( auto_AUXI_to_COMM_data_cnt < sizeof(auto_AUXI_to_COMM_data_array) )
					//if there is auto data for COMM and it has not been all sent yet
					//Note: Since the counter is a byte, it's lowest value is 0. And the array size can't be smaller than zero. So this can only be true if the array has data, i.e. it's size is greater than 0 and the counter is less than the size of the array. If the array is empty, the size would be 0 and the counter's lowest value would be 0, so it would be equal and not less than, so the if statement would be still false.

					main_sec_msg_queue = auto_AUXI_to_COMM_data_array[auto_AUXI_to_COMM_data_cnt]
					
					//set the next auto data for COMM for the next loop
					auto_AUXI_to_COMM_data_cnt++
					
					sec_comm_cmnc_main_navi_destination_selection = ROVERCOMM_COMM//set destination to COMM						
					
				end else if				
				
				else if( auto_AUXI_to_CMNC_data_cnt < sizeof(auto_AUXI_to_CMNC_data_array) )
					//if there is auto data for CMNC and it has not been all sent yet
					//Note: Since the counter is a byte, it's lowest value is 0. And the array size can't be smaller than zero. So this can only be true if the array has data, i.e. it's size is greater than 0 and the counter is less than the size of the array. If the array is empty, the size would be 0 and the counter's lowest value would be 0, so it would be equal and not less than, so the if statement would be still false.

					main_sec_msg_queue = auto_AUXI_to_CMNC_data_array[auto_AUXI_to_CMNC_data_cnt]
					
					//set the next auto data for CMNC for the next loop
					auto_AUXI_to_CMNC_data_cnt++
					
					sec_comm_cmnc_main_navi_destination_selection = ROVERCOMM_CMNC//set destination to CMNC
					
					
				end else if
	
				else if( auto_AUXI_to_MAIN_data_cnt < sizeof(auto_AUXI_to_MAIN_data_array) )
					//if there is auto data for MAIN and it has not been all sent yet
					//Note: Since the counter is a byte, it's lowest value is 0. And the array size can't be smaller than zero. So this can only be true if the array has data, i.e. it's size is greater than 0 and the counter is less than the size of the array. If the array is empty, the size would be 0 and the counter's lowest value would be 0, so it would be equal and not less than, so the if statement would be still false.

					main_sec_msg_queue = auto_AUXI_to_MAIN_data_array[auto_AUXI_to_MAIN_data_cnt]
					
					//set the next auto data for MAIN for the next loop
					auto_AUXI_to_MAIN_data_cnt++
					
					sec_comm_cmnc_main_navi_destination_selection = ROVERCOMM_MAIN//set destination to MAIN						
					
				end else if						
				else if( auto_AUXI_to_NAVI_data_cnt < sizeof(auto_AUXI_to_NAVI_data_array) )
					//if there is auto data for AUXI and it has not been all sent yet
					//Note: Since the counter is a byte, it's lowest value is 0. And the array size can't be smaller than zero. So this can only be true if the array has data, i.e. it's size is greater than 0 and the counter is less than the size of the array. If the array is empty, the size would be 0 and the counter's lowest value would be 0, so it would be equal and not less than, so the if statement would be still false.

					main_sec_msg_queue = auto_AUXI_to_NAVI_data_array[auto_AUXI_to_NAVI_data_cnt]
					
					//set the next auto data for AUXI for the next loop
					auto_AUXI_to_NAVI_data_cnt++
					
					sec_comm_cmnc_main_navi_destination_selection = ROVERCOMM_AUXI//set destination to AUXI						
					
				end else if				
				//else do nothing since there was no message and no auto data to send
				end if	


				//Once all the counters are equal to or greater than the size of the arrays (or even if the array is empty with size 0), reset all the counters)
				if (
					auto_AUXI_to_COMM_data_cnt >= sizeof(auto_AUXI_to_COMM_data_array) &&
					auto_AUXI_to_CMNC_data_cnt >= sizeof(auto_AUXI_to_CMNC_data_array) &&
					auto_AUXI_to_MAIN_data_cnt >= sizeof(auto_AUXI_to_MAIN_data_array) &&
					auto_AUXI_to_NAVI_data_cnt >= sizeof(auto_AUXI_to_NAVI_data_array)
					)
						auto_AUXI_to_COMM_data_cnt = 0;
						auto_AUXI_to_CMNC_data_cnt = 0;
						auto_AUXI_to_MAIN_data_cnt = 0;
						auto_AUXI_to_NAVI_data_cnt = 0;
				endif


					
				
			end if
			Mode: SYSTEM_ERROR
			set next state to TX_COMMUNICATIONS						
			go to RUN_HOUSEKEEPING_TASKS		
	TX_COMMUNICATIONS		
		POWER_ON_AND_HW_RESET
			do nothing	
		INITIALIZATION
			do nothing			
		SYNCHRONIZATION		
			//AUXI doesn't have or need redirection since it only talks to MAIN. But it does have two message queues, primary and secondary.
			
			if pc_usb_msg_queue != CMD_TAG_NO_MSG
				Sends internally generated msg(s) to PC_USB
			end if	
			if main_pri_msg_queue != CMD_TAG_NO_MSG
				Sends internally generated msg(s) to MAIN
			end if		
	
			//Only the primary message queue is sent (the system ready msg to MAIN), and everything else can be ignored since the system is still synching up.
				
				clear message queues
					pc_usb_msg_queue = CMD_TAG_NO_MSG
					main_pri_msg_queue = CMD_TAG_NO_MSG
					main_sec_msg_queue = CMD_TAG_NO_MSG
					pri_comm_cmnc_main_auxi_destination_selection = ROVERCOMM_MAIN//default
					sec_comm_cmnc_main_auxi_destination_selection = ROVERCOMM_MAIN//default
				first_transmission = true //reset the flag

			//Troubleshooting tip: If MAIN keeps missing this message, can send it twice through the main_pri_msg_queue and then the main_sec_msg_queue as well.	
	
			Mode: SYNCHRONIZATION
			set next state to RX_COMMUNICATIONS
			go to RUN_HOUSEKEEPING_TASKS							

		NORMAL_OPERATIONS
			//AUXI doesn't have or need redirection since it only talks to MAIN. But it does have two message queues, primary and secondary.		
			if first_transmission == true		
				first_transmission = false //clear the flag, so on the next iteration it won't process as the first transmission
				//reset the counter before use
				transmission_delay_cnt = 0
				//send the first set of messages
				if pc_usb_msg_queue != CMD_TAG_NO_MSG
					Sends internally generated msg(s) to PC_USB
				end if					
				if main_pri_msg_queue != CMD_TAG_NO_MSG
					Sends internally generated msg(s) to MAIN
				end if						
				//AUXI doesn't have or need redirection since it only talks to MAIN. But it does have two message queues, primary and secondary
				//check to see if there are any second messages to send
				if main_sec_msg_queue != CMD_TAG_NO_MSG
					first_transmission = false //clear the flag, so on the next iteration it won't process as the first transmission
					//reset the counter before use
					transmission_delay_cnt = 0
					Mode: NORMAL_OPERATIONS
					set next state to TX_COMMUNICATIONS //return to this state after running house keeping tasks (to allow for delays before another transmission)					
					go to RUN_HOUSEKEEPING_TASKS	
				else//if there is no second transmission, move on
					clear message queues
						pc_usb_msg_queue = CMD_TAG_NO_MSG					
						main_pri_msg_queue = CMD_TAG_NO_MSG					
						main_sec_msg_queue = CMD_TAG_NO_MSG			
						pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_MAIN//default
						sec_comm_cmnc_main_navi_destination_selection = ROVERCOMM_MAIN//default						
					first_transmission = true //reset the flag
					Mode: NORMAL_OPERATIONS
					set next state to RX_COMMUNICATIONS
					go to RUN_HOUSEKEEPING_TASKS							
				end if	
			else			
				if transmission_delay_cnt >= CONCURRENT_TRANSMISSION_DELAY //once the desired delay has been reached, continue with the code							
					//Send the second set of messages
					if main_sec_msg_queue != CMD_TAG_NO_MSG
						Sends internally generated msg(s) to MAIN
					end if			
					clear message queues
						pc_usb_msg_queue = CMD_TAG_NO_MSG					
						main_pri_msg_queue = CMD_TAG_NO_MSG					
						main_sec_msg_queue = CMD_TAG_NO_MSG			
						pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_MAIN//default
						sec_comm_cmnc_main_navi_destination_selection = ROVERCOMM_MAIN//default
					first_transmission = true //reset the flag
					Mode: NORMAL_OPERATIONS
					set next state to RX_COMMUNICATIONS
					go to RUN_HOUSEKEEPING_TASKS	
				else
					transmission_delay_cnt++//increment the transmission delay counter
					Mode: NORMAL_OPERATIONS
					set next state to TX_COMMUNICATIONS //return to this state after running house keeping tasks (to allow for delays before another transmission)					
					go to RUN_HOUSEKEEPING_TASKS	
				end if
			end if			
		SYSTEM_SLEEPING
			//AUXI doesn't have or need redirection since it only talks to MAIN. But it does have two message queues, primary and secondary				
			if pc_usb_msg_queue != CMD_TAG_NO_MSG
				Sends internally generated msg(s) to PC_USB
			end if	
			If main_pri_msg_queue != CMD_TAG_NO_MSG
				Sends internally generated msg(s) to MAIN//Sends the sleeping acknowledgement
			end if		
			
			//Only the primary message queue is sent (the sleeping acknowledgement to MAIN), and everything else can be ignored since the system is going to sleep anyways.
			
	
			clear message queues
				pc_usb_msg_queue = CMD_TAG_NO_MSG					
				main_pri_msg_queue = CMD_TAG_NO_MSG
				main_sec_msg_queue = CMD_TAG_NO_MSG
				pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_MAIN//default
				sec_comm_cmnc_main_navi_destination_selection = ROVERCOMM_MAIN//default
			first_transmission = true //reset the flag
			//Note: If MAIN misses this message, MAIN will go into sleeping error and would require a SW reset or HW reset to take the Rover out of this error. (AUXI can't resend the sleeping acknowledgement since it already went to sleep)
			//Troubleshooting tip: If MAIN keeps missing this message, can send it twice through the main_pri_msg_queue and then the main_sec_msg_queue as well.

			
			//SETUP FOR WAKEUP
				Mode: SYSTEM_WAKING *begin* //setup this mode ahead of time before going to sleep
				
				set next state to CONTROL_OUTPUTS //Go to CONTROL_OUTPUTS in order to restore previous states
				
				//Restore previous laser states
				enable_left_laser = left_laser_prev_state
				enable_right_laser = right_laser_prev_state
				
				//clear the flags for future reuse
				left_laser_prev_state = false
				right_laser_prev_state = false

				Run other pre-sleep tasks. (i.e. end software serial, as needed)
			//END OF SETUP FOR WAKEUP
					

			//GOING TO SLEEP
			Put AUXI to sleep
				Don't switch states yet. Go to sleep in the current TX_COMMUNICATIONS state.

			//WAKING UP
			MAIN will wake up AUXI from the sleep.

			Run wake up tasks. (i.e. begin SW serial as needed, etc.)
							
			While in the SYSTEM_WAKING mode, after going to RUN_HOUSEKEEPING_TASKS, it will go to the next state, which is set to CONTROL_OUTPUTS			
		SYSTEM_WAKING
			do nothing	
		SW_RESETTING
			//AUXI doesn't have or need redirection since it only talks to MAIN. But it does have two message queues, primary and secondary
			
			if pc_usb_msg_queue != CMD_TAG_NO_MSG
				Sends internally generated msg(s) to PC_USB
			end if					
			If main_pri_msg_queue != CMD_TAG_NO_MSG
				Sends internally generated msg(s) to MAIN//Sends the SW reset acknowledgement
			end if		

			//Only the primary message queue is sent (the sw reset acknowledgement to MAIN), and everything else can be ignored since the system is going to sw resetting anyways.			
			
			clear message queues
				pc_usb_msg_queue = CMD_TAG_NO_MSG	
				main_pri_msg_queue = CMD_TAG_NO_MSG
				main_sec_msg_queue = CMD_TAG_NO_MSG
				pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_MAIN//default
				sec_comm_cmnc_main_navi_destination_selection = ROVERCOMM_MAIN//default
			first_transmission = true //reset the flag
			//Note: If MAIN misses this message, MAIN will go into SW reset error and re-request for a SW reset			
			//Troubleshooting tip: If MAIN keeps missing this message, can send it twice through the main_pri_msg_queue and then the main_sec_msg_queue as well.
			Mode: INITIALIZATION *begin*		
			set next state to RUN_HOUSEKEEPING_TASKS
			
		
			
		SYSTEM_ERROR
			//AUXI doesn't have or need redirection since it only talks to MAIN. But it does have two message queues, primary and secondary		
			if first_transmission == true		
				first_transmission = false //clear the flag, so on the next iteration it won't process as the first transmission
				//reset the counter before use
				transmission_delay_cnt = 0
				//send the first set of messages
				if pc_usb_msg_queue != CMD_TAG_NO_MSG
					Sends internally generated msg(s) to PC_USB
				end if					
				if main_pri_msg_queue != CMD_TAG_NO_MSG
				end if						
				//check to see if there are any second messages to send
				if main_sec_msg_queue != CMD_TAG_NO_MSG	
					first_transmission = false //clear the flag, so on the next iteration it won't process as the first transmission
					//reset the counter before use
					transmission_delay_cnt = 0
					Mode: SYSTEM_ERROR
					set next state to TX_COMMUNICATIONS //return to this state after running house keeping tasks (to allow for delays before another transmission)					
					go to RUN_HOUSEKEEPING_TASKS	
				else//if there is no second transmission, move on
					clear message queues
						pc_usb_msg_queue = CMD_TAG_NO_MSG	
						main_pri_msg_queue = CMD_TAG_NO_MSG					
						main_sec_msg_queue = CMD_TAG_NO_MSG			
						pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_MAIN//default
						sec_comm_cmnc_main_navi_destination_selection = ROVERCOMM_MAIN//default						
					first_transmission = true //reset the flag
					Mode: SYSTEM_ERROR
					set next state to RX_COMMUNICATIONS
					go to RUN_HOUSEKEEPING_TASKS							
				end if	
			else			
				if transmission_delay_cnt >= CONCURRENT_TRANSMISSION_DELAY //once the desired delay has been reached, continue with the code							
					//Send the second set of messages
					if main_sec_msg_queue != CMD_TAG_NO_MSG	
						Sends internally generated msg(s) to MAIN
					end if			
					clear message queues
						pc_usb_msg_queue = CMD_TAG_NO_MSG	
						main_pri_msg_queue = CMD_TAG_NO_MSG					
						main_sec_msg_queue = CMD_TAG_NO_MSG	
						pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_MAIN//default
						sec_comm_cmnc_main_navi_destination_selection = ROVERCOMM_MAIN//default
					first_transmission = true //reset the flag
					//Note: Any health errors will have it's messages recreated in SYSTEM_HEALTH						
					Mode: SYSTEM_ERROR
					set next state to RX_COMMUNICATIONS
					go to RUN_HOUSEKEEPING_TASKS	
				else
					transmission_delay_cnt++//increment the transmission delay counter
					Mode: SYSTEM_ERROR
					set next state to TX_COMMUNICATIONS //return to this state after running house keeping tasks (to allow for delays before another transmission)					
					go to RUN_HOUSEKEEPING_TASKS	
				end if
			end if				
		DEFAULT:
			Set mode to SYSTEM_ERROR *begin*
			error_origin = ROVERCOMM_AUXI
			main_pri_msg_queue = CMD_TAG_GENERIC_SYSTEM_ERROR_STATUS//to be sent to MAIN (first), which will process it, then send a copy to MAIN, then to COMM, which will then process it and send a copy to CMNC
			pc_usb_msg_queue = INVALID_STATE_OR_MODE_ERROR_STATUS			

			pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_MAIN
	
			set invalid_state_or_mode_error = true
					(Note: the invalid_state_or_mode_error flag can only be cleared with a sw reset or hw reset)
			//initialize/reset shared counter before use
			timeout_counter = 0;
			Set next state to CONTROL_OUTPUTS								
			go to RUN_HOUSEKEEPING_TASKS




	
	

			
State Matrix Design = States vs. Modes			
==================
States
==================
Note: These states don't always have to go in order.
	RUN_HOUSEKEEPING_TASKS
		runs in parallel with every loop
	RX_COMMUNICATIONS
		rxData()
	DATA_VALIDATION
		data parsing and validation
		parseAndValidateData()
	DATA_FILTER
		dataDirector()
	READ_INPUTS
	SYSTEM_HEALTH
	PROCESS_DATA
		commandDirector()
	CONTROL_OUTPUTS			
	CREATE_DATA
	TX_COMMUNICATIONS		
	
==================
Modes
==================
Note: These states don't always have to go in order.
Note: *begin* means this is one of the starting points for this mode

POWER_ON_AND_HW_RESET
INITIALIZATION
SYNCHRONIZATION			
NORMAL_OPERATIONS
SYSTEM_SLEEPING
SYSTEM_WAKING
SW_RESETTING
SYSTEM_ERROR
DEFAULT
		
==================
Command Options (i.e. used in the PROCESS_DATA state. Typically from the NORMAL_OPERATIONS mode, but not always)
==================	
Note: With external commands, you only want to do all hw or all sw request (and not individual hw/sw requests). Else the system won't be in sync anymore. So hw/sw requests must be synced and have controlled points of entry.
	But internally, it may call individual commands as required.
Note: With external commands, you only want to do all sleep requests (and not individual sleep requests). Else the system won't be in sync anymore. So sleep requests must be synced and have controlled points of entry.
	But internally, it may call individual commands as required.

--------------	

Non-Conflicting Functions (i.e. it doesn't override the message queues or change states or modes)

	MAIN System Ready (from MAIN)
		main_system_ready = true (so it can stop checking for this message since the MAIN system is known to be ready)
		//NOTE: Since this is a non-conflicting command, if resetting the timeout_counter here causes an issue, then take that out of the code
		timeout_counter = 0 (for future use)

Conflicting Functions Ordered By Priority	
	Note: Don't forget to look at Non-Conflicting Functions as well.
	Most of the time (but not always), these commands will be ran from NORMAL_OPERATIONS mode under the PROCESS_DATA state. The next state is CONTROL_OUTPUTS, unless overwritten.

		AUXI SW Reset Request (usually from MAIN)
			main_pri_msg_queue = SW_IS_RESETTING
			pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_MAIN
			//Turn off Lasers, since the next state from here will be CONTROL_OUTPUTS
			Set enable_left_laser = false
			Set enable_right_laser = false
			Mode: SW_RESETTING *begin*		
			//Note: The actual SW reset will happen after TX_COMMUNICATIONS where it goes into INITIALIZATION.

			
		//Note: No Received Generic Health Error for AUXI since Health Errors Originate from AUXI.
		
		Received Generic System Error

			//For now just forward it to MAIN (CMNC) and PC_USB (as well as other Arduinos), keeping the original destination. No need to go into SYSTEM_ERROR mode just yet. Only health errors need to go to SYSTEM_ERROR mode. Only health errors need to go to SYSTEM_ERROR mode. Though NAVI and AUXI might go to SYSTEM_ERROR mode.		
			
			pc_usb_msg_queue = GENERIC_SYSTEM_ERROR_STATUS

			if( error_origin != ROVERCOMM_MAIN)//Make sure don't send it back to itself to avoid an infinite loop
			{
				main_pri_msg_queue = CMD_TAG_GENERIC_SYSTEM_ERROR_STATUS;//send a generic system error to main which will send a copy to cmnc as well (MAIN only accepts generic health and generic system errors at the moment. Also only generic health and generic system errors are usually left unfiltered in many states like SYNCHRONIZATION. else you have to send a message that should redirect to cmnc directly, but it would bypass MAIN and won't error MAIN out. Sometimes you want MAIN to error out on any error.)
				
				pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_MAIN
				
			}//end if		
			
			generic_system_error = true
			(Note: the generic_system_error flag can only be cleared with a sw reset or hw reset)
			
			
			//Assign the error_origin to where the data was generated from
			If command was from CMNC
				Set error_origin = ROVERCOMM_CMNC
			else if command was from NAVI
				Set error_origin = ROVERCOMM_NAVI
			else if command was from AUXI
				Set error_origin = ROVERCOMM_AUXI (though this wouldn't happen as it would come from itself. just keep it there for consistency)
			else if command was from MAIN
				Set error_origin = ROVERCOMM_MAIN			
			else if command was from COMM
				Set error_origin = ROVERCOMM_COMM							
			else if command was from PC_USB
				Set error_origin = ROVERCOMM_PC_USB							
			else
				Set error_origin = ROVERCOMM_NONE							
			end if
			
			
			//All errors from MAIN, NAVI, AUXI, COMM, CMNC, PC_USB should be redirected to MAIN, and MAIN will redirect it to CMNC
			//Then CMNC will talk to COMM where it can then allow hw and sw resets, etc.
			Improvement Tip: AUXI can go into error mode if it gets an error message from MAIN, NAVI, AUXI, COMM, CMNC, PC_USB
		
		System Go (from MAIN)
			set system go flag
			Mode: NORMAL_OPERATIONS *begin*		
			//initialize/reset shared counter before use
			timeout_counter = 0;	
					
			
		AUXI Sleep Request (usually from MAIN)
			//save the state of the laser enables before shutting them off to go to sleep
			clear system go flag
			left_laser_prev_state = enable_left_laser
			right_laser_prev_state = enable_right_laser
			//set to turn off the laser when sleeping
			Set enable_left_laser = false
			Set enable_right_laser = false
			main_pri_msg_queue = SYSTEM_IS_SLEEPING
			pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_MAIN
			Mode: SYSTEM_SLEEPING *begin*
		Set Left Laser Enable			
			If Turn Left Laser On
				turn on the left laser
				enable_left_laser = true
				main_pri_msg_queue = ENABLING_LEFT_LASER
			Else//Turn Left Laser Off
				turn off the left laser
				enable_left_laser = false
				main_pri_msg_queue = DISABLING_LEFT_LASER						
			End if				
			
			If command was from CMNC
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_CMNC
			else if command was from NAVI
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_NAVI
			else if command was from AUXI
				Set error_origin = ROVERCOMM_AUXI (though this wouldn't happen as it would come from itself. just keep it there for consistency)				
			else if command was from MAIN
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_MAIN			
			else if command was from COMM
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_COMM							
			else if command was from PC_USB
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_PC_USB							
			else
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_NONE							
			end if
			
		Get Left Laser Status
			main_pri_msg_queue = LEFT_LASER_STATUS	
			If command was from CMNC
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_CMNC
			else if command was from NAVI
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_NAVI
			else if command was from AUXI
				Set error_origin = ROVERCOMM_AUXI (though this wouldn't happen as it would come from itself. just keep it there for consistency)				
			else if command was from MAIN
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_MAIN			
			else if command was from COMM
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_COMM							
			else if command was from PC_USB
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_PC_USB							
			else
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_NONE							
			end if
			
		Set Right Laser Enable
			If Turn Right Laser On
				turn on the right laser
				enable_right_laser = true
				main_pri_msg_queue = ENABLING_RIGHT_LASER
			Else//Turn Right Laser Off
				turn off the right laser
				enable_right_laser = false
				main_pri_msg_queue = DISABLING_RIGHT_LASER		
			End if
			
			If command was from CMNC
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_CMNC
			else if command was from NAVI
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_NAVI
			else if command was from AUXI
				Set error_origin = ROVERCOMM_AUXI (though this wouldn't happen as it would come from itself. just keep it there for consistency)				
			else if command was from MAIN
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_MAIN			
			else if command was from COMM
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_COMM							
			else if command was from PC_USB
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_PC_USB							
			else
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_NONE							
			end if

			
		Get Right Laser Status
			main_pri_msg_queue = RIGHT_LASER_STATUS		
			
			If command was from CMNC
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_CMNC
			else if command was from NAVI
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_NAVI
			else if command was from AUXI
				Set error_origin = ROVERCOMM_AUXI (though this wouldn't happen as it would come from itself. just keep it there for consistency)				
			else if command was from MAIN
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_MAIN			
			else if command was from COMM
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_COMM							
			else if command was from PC_USB
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_PC_USB							
			else
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_NONE							
			end if

			
		Get 7.2V (Actual) Status
			main_pri_msg_queue = VOLTAGE_7D2_ACTUAL_STATUS
			
			If command was from CMNC
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_CMNC
			else if command was from NAVI
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_NAVI
			else if command was from AUXI
				Set error_origin = ROVERCOMM_AUXI (though this wouldn't happen as it would come from itself. just keep it there for consistency)				
			else if command was from MAIN
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_MAIN			
			else if command was from COMM
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_COMM							
			else if command was from PC_USB
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_PC_USB							
			else
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_NONE							
			end if

			
		Get Current 7.2V Pre switched (25A) (Actual) Status
			main_pri_msg_queue = CURRENT_7D2_PRESW25A_ACTUAL_STATUS
			
			If command was from CMNC
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_CMNC
			else if command was from NAVI
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_NAVI
			else if command was from AUXI
				Set error_origin = ROVERCOMM_AUXI (though this wouldn't happen as it would come from itself. just keep it there for consistency)				
			else if command was from MAIN
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_MAIN			
			else if command was from COMM
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_COMM							
			else if command was from PC_USB
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_PC_USB							
			else
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_NONE							
			end if

			
		Get Current 7.2V Switched (25A) (Actual) Status
			main_pri_msg_queue = CURRENT_7D2_SW12D5A_ACTUAL_STATUS
			
			If command was from CMNC
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_CMNC
			else if command was from NAVI
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_NAVI
			else if command was from AUXI
				Set error_origin = ROVERCOMM_AUXI (though this wouldn't happen as it would come from itself. just keep it there for consistency)				
			else if command was from MAIN
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_MAIN			
			else if command was from COMM
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_COMM							
			else if command was from PC_USB
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_PC_USB							
			else
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_NONE							
			end if
			
		Get Photosensor Beacon CCA Left Side-Left Pointing (Actual) Status
			main_pri_msg_queue = PHOTOSENSOR_BEACONCCA_LEFTSIDE_LEFTPOINTING_ACTUAL_STATUS
			
			If command was from CMNC
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_CMNC
			else if command was from NAVI
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_NAVI
			else if command was from AUXI
				Set error_origin = ROVERCOMM_AUXI (though this wouldn't happen as it would come from itself. just keep it there for consistency)				
			else if command was from MAIN
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_MAIN			
			else if command was from COMM
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_COMM							
			else if command was from PC_USB
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_PC_USB							
			else
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_NONE							
			end if

			
		Get Photosensor Beacon CCA Left Side-Left Pointing (Actual) Status
			main_pri_msg_queue = PHOTOSENSOR_GPSCCA_REARSIDE_UPWARDPOINTING_ACTUAL_STATUS
			
			If command was from CMNC
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_CMNC
			else if command was from NAVI
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_NAVI
			else if command was from AUXI
				Set error_origin = ROVERCOMM_AUXI (though this wouldn't happen as it would come from itself. just keep it there for consistency)				
			else if command was from MAIN
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_MAIN			
			else if command was from COMM
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_COMM							
			else if command was from PC_USB
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_PC_USB							
			else
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_NONE							
			end if

			
		Get Temp Sensor Beacon CCA Center Side (Actual) Status
			main_pri_msg_queue = TEMPSENSOR_BEACONCCA_CENTERSIDE_ACTUAL_STATUS

			If command was from CMNC
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_CMNC
			else if command was from NAVI
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_NAVI
			else if command was from AUXI
				Set error_origin = ROVERCOMM_AUXI (though this wouldn't happen as it would come from itself. just keep it there for consistency)				
			else if command was from MAIN
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_MAIN			
			else if command was from COMM
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_COMM							
			else if command was from PC_USB
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_PC_USB							
			else
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_NONE							
			end if
			
		Get Temp Sensor Power CCA Center Side Mtr Mosfet (Actual) Status
			main_pri_msg_queue = TEMPSENSOR_POWERCCA_CENTERSIDE_MTRMOSFET_ACTUAL_STATUS
			
			If command was from CMNC
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_CMNC
			else if command was from NAVI
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_NAVI
			else if command was from AUXI
				Set error_origin = ROVERCOMM_AUXI (though this wouldn't happen as it would come from itself. just keep it there for consistency)				
			else if command was from MAIN
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_MAIN			
			else if command was from COMM
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_COMM							
			else if command was from PC_USB
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_PC_USB							
			else
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_NONE							
			end if
			
		Get Voltage 5 Analog CCA (Actual) Status
			main_pri_msg_queue = VOLTAGE_5_ANALOGCCA_ACTUAL_STATUS
			
			If command was from CMNC
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_CMNC
			else if command was from NAVI
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_NAVI
			else if command was from AUXI
				Set error_origin = ROVERCOMM_AUXI (though this wouldn't happen as it would come from itself. just keep it there for consistency)				
			else if command was from MAIN
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_MAIN			
			else if command was from COMM
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_COMM							
			else if command was from PC_USB
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_PC_USB							
			else
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_NONE							
			end if

			
		Get Current 3D3 SW 12.5A (Actual) Status
			main_pri_msg_queue = CURRENT_3D3_SW12D5A_ACTUAL_STATUS
			
			If command was from CMNC
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_CMNC
			else if command was from NAVI
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_NAVI
			else if command was from AUXI
				Set error_origin = ROVERCOMM_AUXI (though this wouldn't happen as it would come from itself. just keep it there for consistency)				
			else if command was from MAIN
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_MAIN			
			else if command was from COMM
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_COMM							
			else if command was from PC_USB
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_PC_USB							
			else
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_NONE							
			end if

			
		Get Photosensor Beacon CCA Center Side Upward Pointing (Actual) Status
			main_pri_msg_queue = PHOTOSENSOR_BEACONCCA_CENTERSIDE_UPWARDPOINTING_ACTUAL_STATUS
			
			If command was from CMNC
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_CMNC
			else if command was from NAVI
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_NAVI
			else if command was from AUXI
				Set error_origin = ROVERCOMM_AUXI (though this wouldn't happen as it would come from itself. just keep it there for consistency)				
			else if command was from MAIN
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_MAIN			
			else if command was from COMM
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_COMM							
			else if command was from PC_USB
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_PC_USB							
			else
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_NONE							
			end if

			
		Get Photosensor Beacon CCA Rear Side Rear Pointing (Actual) Status
			main_pri_msg_queue = PHOTOSENSOR_BEACONCCA_REARSIDE_REARPOINTING_ACTUAL_STATUS
			
			If command was from CMNC
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_CMNC
			else if command was from NAVI
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_NAVI
			else if command was from AUXI
				Set error_origin = ROVERCOMM_AUXI (though this wouldn't happen as it would come from itself. just keep it there for consistency)				
			else if command was from MAIN
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_MAIN			
			else if command was from COMM
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_COMM							
			else if command was from PC_USB
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_PC_USB							
			else
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_NONE							
			end if

			
		Get Photosensor Beacon CCA Left Side Upward Pointing (Actual) Status
			main_pri_msg_queue = PHOTOSENSOR_BEACONCCA_LEFTSIDE_UPWARDPOINTING_ACTUAL_STATUS
			
			If command was from CMNC
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_CMNC
			else if command was from NAVI
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_NAVI
			else if command was from AUXI
				Set error_origin = ROVERCOMM_AUXI (though this wouldn't happen as it would come from itself. just keep it there for consistency)				
			else if command was from MAIN
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_MAIN			
			else if command was from COMM
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_COMM							
			else if command was from PC_USB
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_PC_USB							
			else
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_NONE							
			end if

			
		Get Temp Sensor Current CCA Center Side Powerresistor (Actual) Status
			main_pri_msg_queue = TEMPSENSOR_CURRENTCCA_CENTERSIDE_POWERRESISTOR_ACTUAL_STATUS
			
			If command was from CMNC
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_CMNC
			else if command was from NAVI
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_NAVI
			else if command was from AUXI
				Set error_origin = ROVERCOMM_AUXI (though this wouldn't happen as it would come from itself. just keep it there for consistency)				
			else if command was from MAIN
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_MAIN			
			else if command was from COMM
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_COMM							
			else if command was from PC_USB
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_PC_USB							
			else
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_NONE							
			end if

			
		Get Temp Sensor Digital CCA Middle Side (Actual) Status
			main_pri_msg_queue = TEMPSENSOR_DIGITALCCA_MIDDLESIDE_ACTUAL_STATUS
			
			If command was from CMNC
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_CMNC
			else if command was from NAVI
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_NAVI
			else if command was from AUXI
				Set error_origin = ROVERCOMM_AUXI (though this wouldn't happen as it would come from itself. just keep it there for consistency)				
			else if command was from MAIN
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_MAIN			
			else if command was from COMM
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_COMM							
			else if command was from PC_USB
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_PC_USB							
			else
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_NONE							
			end if

			
		Get Voltage 3D3 SW (Actual) Status
			main_pri_msg_queue = VOLTAGE_3D3_SW_ACTUAL_STATUS
			
			If command was from CMNC
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_CMNC
			else if command was from NAVI
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_NAVI
			else if command was from AUXI
				Set error_origin = ROVERCOMM_AUXI (though this wouldn't happen as it would come from itself. just keep it there for consistency)				
			else if command was from MAIN
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_MAIN			
			else if command was from COMM
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_COMM							
			else if command was from PC_USB
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_PC_USB							
			else
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_NONE							
			end if
			
		Get Current Motorctrlr Ch1 12.5A (Actual) Status
			main_pri_msg_queue = CURRENT_MOTORCTRLR_CH1_12D5A_ACTUAL_STATUS
			
			If command was from CMNC
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_CMNC
			else if command was from NAVI
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_NAVI
			else if command was from AUXI
				Set error_origin = ROVERCOMM_AUXI (though this wouldn't happen as it would come from itself. just keep it there for consistency)				
			else if command was from MAIN
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_MAIN			
			else if command was from COMM
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_COMM							
			else if command was from PC_USB
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_PC_USB							
			else
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_NONE							
			end if

			
		Get Photosensor Beacon CCA Front Side Forward Pointing (Actual) Status
			main_pri_msg_queue = PHOTOSENSOR_BEACONCCA_FRONTSIDE_FORWARDPOINTING_ACTUAL_STATUS
			
			If command was from CMNC
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_CMNC
			else if command was from NAVI
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_NAVI
			else if command was from AUXI
				Set error_origin = ROVERCOMM_AUXI (though this wouldn't happen as it would come from itself. just keep it there for consistency)				
			else if command was from MAIN
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_MAIN			
			else if command was from COMM
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_COMM							
			else if command was from PC_USB
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_PC_USB							
			else
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_NONE							
			end if

			
		Get Photosensor Current CCA Center Side Upward Pointing Middledeck (Actual) Status
			main_pri_msg_queue = PHOTOSENSOR_CURRENTCCA_CENTERSIDE_UPWARDPOINTING_MIDDLEDECK_ACTUAL_STATUS
			
			If command was from CMNC
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_CMNC
			else if command was from NAVI
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_NAVI
			else if command was from AUXI
				Set error_origin = ROVERCOMM_AUXI (though this wouldn't happen as it would come from itself. just keep it there for consistency)				
			else if command was from MAIN
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_MAIN			
			else if command was from COMM
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_COMM							
			else if command was from PC_USB
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_PC_USB							
			else
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_NONE							
			end if
			
		Get Photosensor Power CCA Left Side Left Pointing (Actual) Status
			main_pri_msg_queue = PHOTOSENSOR_POWERCCA_LEFTSIDE_LEFTPOINTING_ACTUAL_STATUS

			If command was from CMNC
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_CMNC
			else if command was from NAVI
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_NAVI
			else if command was from AUXI
				Set error_origin = ROVERCOMM_AUXI (though this wouldn't happen as it would come from itself. just keep it there for consistency)				
			else if command was from MAIN
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_MAIN			
			else if command was from COMM
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_COMM							
			else if command was from PC_USB
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_PC_USB							
			else
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_NONE							
			end if
			
		Get Temp Sensor Gps CCA Rear Side Upperdeck (Actual) Status
			main_pri_msg_queue = TEMPSENSOR_GPSCCA_REARSIDE_UPPERDECK_ACTUAL_STATUS

			If command was from CMNC
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_CMNC
			else if command was from NAVI
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_NAVI
			else if command was from AUXI
				Set error_origin = ROVERCOMM_AUXI (though this wouldn't happen as it would come from itself. just keep it there for consistency)				
			else if command was from MAIN
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_MAIN			
			else if command was from COMM
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_COMM							
			else if command was from PC_USB
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_PC_USB							
			else
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_NONE							
			end if
			
		Get Gas Beacon CCA Right Pointing (Actual) Status
			main_pri_msg_queue = GAS_BEACONCCA_RIGHTPOINTING_ACTUAL_STATUS
			
			If command was from CMNC
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_CMNC
			else if command was from NAVI
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_NAVI
			else if command was from AUXI
				Set error_origin = ROVERCOMM_AUXI (though this wouldn't happen as it would come from itself. just keep it there for consistency)				
			else if command was from MAIN
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_MAIN			
			else if command was from COMM
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_COMM							
			else if command was from PC_USB
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_PC_USB							
			else
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_NONE							
			end if
			
		Get Current Motorctrlr Ch2 12.5A (Actual) Status
			main_pri_msg_queue = CURRENT_MOTORCTRLR_CH2_12D5A_ACTUAL_STATUS
			
			If command was from CMNC
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_CMNC
			else if command was from NAVI
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_NAVI
			else if command was from AUXI
				Set error_origin = ROVERCOMM_AUXI (though this wouldn't happen as it would come from itself. just keep it there for consistency)				
			else if command was from MAIN
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_MAIN			
			else if command was from COMM
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_COMM							
			else if command was from PC_USB
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_PC_USB							
			else
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_NONE							
			end if

			
		Get Photosensor Beacon CCA Right Side Right Pointing (Actual) Status
			main_pri_msg_queue = PHOTOSENSOR_BEACONCCA_RIGHTSIDE_RIGHTPOINTING_ACTUAL_STATUS

			If command was from CMNC
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_CMNC
			else if command was from NAVI
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_NAVI
			else if command was from AUXI
				Set error_origin = ROVERCOMM_AUXI (though this wouldn't happen as it would come from itself. just keep it there for consistency)				
			else if command was from MAIN
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_MAIN			
			else if command was from COMM
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_COMM							
			else if command was from PC_USB
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_PC_USB							
			else
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_NONE							
			end if
			
		Get Photosensor Current CCA Frontupward Pointing Middledeck (Actual) Status
			main_pri_msg_queue = PHOTOSENSOR_CURRENTCCA_FRONTUPWARDPOINTING_MIDDLEDECK_ACTUAL_STATUS
			
			If command was from CMNC
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_CMNC
			else if command was from NAVI
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_NAVI
			else if command was from AUXI
				Set error_origin = ROVERCOMM_AUXI (though this wouldn't happen as it would come from itself. just keep it there for consistency)				
			else if command was from MAIN
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_MAIN			
			else if command was from COMM
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_COMM							
			else if command was from PC_USB
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_PC_USB							
			else
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_NONE							
			end if
			
		Get Photosensor Digital CCA Left Side Upward Pointing (Actual) Status
			main_pri_msg_queue = PHOTOSENSOR_DIGITALCCA_LEFTSIDE_UPWARDPOINTING_ACTUAL_STATUS
			
			If command was from CMNC
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_CMNC
			else if command was from NAVI
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_NAVI
			else if command was from AUXI
				Set error_origin = ROVERCOMM_AUXI (though this wouldn't happen as it would come from itself. just keep it there for consistency)				
			else if command was from MAIN
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_MAIN			
			else if command was from COMM
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_COMM							
			else if command was from PC_USB
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_PC_USB							
			else
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_NONE							
			end if
			
		Get Temp Sensor Power CCA Front Side Charger Solar Or Gate (Actual) Status
			main_pri_msg_queue = TEMPSENSOR_POWERCCA_FRONTSIDE_CHARGER_SOLAR_OR_GATE_ACTUAL_STATUS
			
			If command was from CMNC
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_CMNC
			else if command was from NAVI
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_NAVI
			else if command was from AUXI
				Set error_origin = ROVERCOMM_AUXI (though this wouldn't happen as it would come from itself. just keep it there for consistency)				
			else if command was from MAIN
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_MAIN			
			else if command was from COMM
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_COMM							
			else if command was from PC_USB
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_PC_USB							
			else
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_NONE							
			end if

			

		Get Heading Status
			main_pri_msg_queue = HEADING_STATUS
			
			If command was from CMNC
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_CMNC
			else if command was from NAVI
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_NAVI
			else if command was from AUXI
				Set error_origin = ROVERCOMM_AUXI (though this wouldn't happen as it would come from itself. just keep it there for consistency)				
			else if command was from MAIN
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_MAIN			
			else if command was from COMM
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_COMM							
			else if command was from PC_USB
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_PC_USB							
			else
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_NONE							
			end if
			
		Get Roll Status
			main_pri_msg_queue = ROLL_STATUS
			
			If command was from CMNC
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_CMNC
			else if command was from NAVI
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_NAVI
			else if command was from AUXI
				Set error_origin = ROVERCOMM_AUXI (though this wouldn't happen as it would come from itself. just keep it there for consistency)				
			else if command was from MAIN
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_MAIN			
			else if command was from COMM
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_COMM							
			else if command was from PC_USB
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_PC_USB							
			else
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_NONE							
			end if
			
		Get Pitch Status
			main_pri_msg_queue = PITCH_STATUS
			
			If command was from CMNC
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_CMNC
			else if command was from NAVI
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_NAVI
			else if command was from AUXI
				Set error_origin = ROVERCOMM_AUXI (though this wouldn't happen as it would come from itself. just keep it there for consistency)				
			else if command was from MAIN
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_MAIN			
			else if command was from COMM
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_COMM							
			else if command was from PC_USB
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_PC_USB							
			else
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_NONE							
			end if
			
		Get Yaw Status
			main_pri_msg_queue = YAW_STATUS
			
			If command was from CMNC
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_CMNC
			else if command was from NAVI
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_NAVI
			else if command was from AUXI
				Set error_origin = ROVERCOMM_AUXI (though this wouldn't happen as it would come from itself. just keep it there for consistency)				
			else if command was from MAIN
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_MAIN			
			else if command was from COMM
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_COMM							
			else if command was from PC_USB
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_PC_USB							
			else
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_NONE							
			end if
			
		Get Current Fault 7.2V 25A Preswitch Status
			main_pri_msg_queue = CURRENT_FAULT_1_7D2V_25A_PRESW_STATUS
			
			If command was from CMNC
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_CMNC
			else if command was from NAVI
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_NAVI
			else if command was from AUXI
				Set error_origin = ROVERCOMM_AUXI (though this wouldn't happen as it would come from itself. just keep it there for consistency)				
			else if command was from MAIN
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_MAIN			
			else if command was from COMM
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_COMM							
			else if command was from PC_USB
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_PC_USB							
			else
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_NONE							
			end if
			
		Get Current Fault 3.3V 12.5A Preswitch Status
			main_pri_msg_queue = CURRENT_FAULT_2_3D3V_12D5A_SW_STATUS
			
			If command was from CMNC
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_CMNC
			else if command was from NAVI
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_NAVI
			else if command was from AUXI
				Set error_origin = ROVERCOMM_AUXI (though this wouldn't happen as it would come from itself. just keep it there for consistency)				
			else if command was from MAIN
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_MAIN			
			else if command was from COMM
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_COMM							
			else if command was from PC_USB
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_PC_USB							
			else
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_NONE							
			end if

			
		Get Current Fault Motor Controller Ch 1 12.5A Status
			main_pri_msg_queue = CURRENT_FAULT_3_MCTRLRCH1_12D5A_STATUS
			
			If command was from CMNC
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_CMNC
			else if command was from NAVI
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_NAVI
			else if command was from AUXI
				Set error_origin = ROVERCOMM_AUXI (though this wouldn't happen as it would come from itself. just keep it there for consistency)				
			else if command was from MAIN
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_MAIN			
			else if command was from COMM
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_COMM							
			else if command was from PC_USB
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_PC_USB							
			else
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_NONE							
			end if
			
			
		Get Current Fault Motor Controller Ch 2 12.5A Status
			main_pri_msg_queue = CURRENT_FAULT_4_MCTRLRCH2_12D5A_STATUS
			
			If command was from CMNC
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_CMNC
			else if command was from NAVI
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_NAVI
			else if command was from AUXI
				Set error_origin = ROVERCOMM_AUXI (though this wouldn't happen as it would come from itself. just keep it there for consistency)				
			else if command was from MAIN
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_MAIN			
			else if command was from COMM
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_COMM							
			else if command was from PC_USB
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_PC_USB							
			else
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_NONE							
			end if
			
		Get Current Fault 7.2V 25A Switched Status
			main_pri_msg_queue = CURRENT_FAULT_5_7D2_12D5A_SW_STATUS
			
			If command was from CMNC
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_CMNC
			else if command was from NAVI
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_NAVI
			else if command was from AUXI
				Set error_origin = ROVERCOMM_AUXI (though this wouldn't happen as it would come from itself. just keep it there for consistency)				
			else if command was from MAIN
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_MAIN			
			else if command was from COMM
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_COMM							
			else if command was from PC_USB
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_PC_USB							
			else
				Set pri_comm_cmnc_main_navi_destination_selection = ROVERCOMM_NONE							
			end if