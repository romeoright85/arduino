Note: For command tags, see command creator excel in K:\Working Directory\DESIGN_PROJ\Design Projects\Robot\My Notes
Note: Once the system goes into the state, SYSTEM_ERROR, it can only be fixed with a HW or SW reset.

#define SYNC_TIMEOUT_VALUE ??
#define SECURE_LINK_TIMEOUT_VALUE ??



At POR (defaults):
	Current State: RUN_HOUSEKEEPING_TASKS
	Next State: RUN_HOUSEKEEPING_TASKS
	Mode: POWER_ON_RESET *begin*
	timeout_counter = 0 //Used to detect timeout of MAIN responding back to COMM for any reason (i.e. system go or system ready responses)
	sync_error = false
	secure_link_error = false
	cmnc_msg_queue = NO_MSG (command tag, not boolean since use by CREATE_DATA to generate messages as well as TX_COMMUNICATIONS as a flag)
	main_msg_queue = NO_MSG (command tag, not boolean since use by CREATE_DATA to generate messages as well as TX_COMMUNICATIONS as a flag)
	redirectToCMNC = false
	redirectToMAIN = false
	main_system_ready = false
	communications_secure = false (used to keep track is the communications link is already secure or not)
	
	




COMM:
		Loop
			RUN_HOUSEKEEPING_TASKS
				POWER_ON_RESET
					run POR tasks
					start background tasks
					Set mode to INITIALIZATION *begin*
					Go to whatever the next state is
						(still is Next State: RUN_HOUSEKEEPING_TASKS)
				INITIALIZATION
					run initialization tasks
						initialize/reinitialize all variables
					initialize background tasks
					Set mode to SYNCHRONIZATION *begin*
					Set next state to RX_COMMUNICATIONS
					Go to whatever the next state is
						(now just set to RX_COMMUNICATIONS)
				SYNCHRONIZATION
					run background tasks
						if timeout_counter > SYNC_TIMEOUT_VALUE
							Set mode to SYSTEM_ERROR *begin*
							Set next state to CREATE_DATA
								(now just set to CREATE_DATA)
								set sync_error = true
									(Note: the sync_error flag can only be cleared with a sw reset or hw reset)
								timeout_counter = 0 (clear the flag so it doesn't get stuck in a vicious loop)
						else
							Mode: SYNCHRONIZATION
						end if
					Go to whatever the next state is
				SECURING_LINK						
					run background tasks
						if timeout_counter > SECURE_LINK_TIMEOUT_VALUE
							Set mode to SYSTEM_ERROR *begin*
							Set next state to CREATE_DATA
								(now just set to CREATE_DATA)
							set secure_link_error = true
								(Note: the secure_link_error flag can only be cleared with a sw reset or hw reset)
							timeout_counter = 0 (clear the flag so it doesn't get stuck in a vicious loop)
						else
							Mode: SECURING_LINK
						end if
					Go to whatever the next state is					
				NORMAL_OPERATIONS						
					run background tasks
					Go to whatever the next state is							
				HW_RESETTING
					Note: though RUN_HOUSEKEEPING_TASKS is not required and can go straight to TX_COMMUNICATIONS, just doing so for consistency with other code.
					run background tasks
					Go to whatever the next state is		
				SYSTEM_SLEEPING
					Note: though RUN_HOUSEKEEPING_TASKS is not required and can go straight to TX_COMMUNICATIONS, just doing so for consistency with other code.
					run background tasks
					Go to whatever the next state is	
				SYSTEM_WAKING
					run background tasks
					Go to whatever the next state is
				SW_RESETTING
					run background tasks
					Go to whatever the next state is		
				SYSTEM_ERROR
					Mode: SYSTEM_ERROR
					run background tasks
					Go to whatever the next state is
			RX_COMMUNICATIONS
				POWER_ON_RESET
					do nothing
				INITIALIZATION
					do nothing
				SYNCHRONIZATION					
					skip for CMNC
					rxData() from MAIN
					Mode: SYNCHRONIZATION
					set next state to DATA_VALIDATION
					go to RUN_HOUSEKEEPING_TASKS
				SECURING_LINK						
					rxData() from CMNC
					rxData() from MAIN
					Mode: SECURING_LINK
					set next state to DATA_VALIDATION
					go to RUN_HOUSEKEEPING_TASKS					
				NORMAL_OPERATIONS						
					rxData() from CMNC
					rxData() from MAIN
					Mode: NORMAL_OPERATIONS
					set next state to DATA_VALIDATION
					go to RUN_HOUSEKEEPING_TASKS							
				HW_RESETTING
					do nothing
				SYSTEM_SLEEPING
					skip for CMNC
					rxData() from MAIN
					Mode: SYSTEM_SLEEPING
					set next state to DATA_VALIDATION
					go to RUN_HOUSEKEEPING_TASKS					
				SYSTEM_WAKING
					do nothing
				SW_RESETTING
					rxData() from CMNC
					rxData() from MAIN
					Mode: SW_RESETTING
					set next state to DATA_VALIDATION
					go to RUN_HOUSEKEEPING_TASKS			
				SYSTEM_ERROR
					rxData() from CMNC
					rxData() from MAIN
					Mode: SYSTEM_ERROR
					set next state to DATA_VALIDATION
					go to RUN_HOUSEKEEPING_TASKS						
			DATA_VALIDATION		
				POWER_ON_RESET
					do nothing
				INITIALIZATION
					do nothing
				SYNCHRONIZATION		
					skip for CMNC
					validateData() from MAIN
					Mode: SYNCHRONIZATION
					set next state to DATA_FILTER
					go to RUN_HOUSEKEEPING_TASKS
				SECURING_LINK					
					validateData() from CMNC
					validateData() from MAIN
					Mode: SECURING_LINK
					set next state to DATA_FILTER
					go to RUN_HOUSEKEEPING_TASKS						
				NORMAL_OPERATIONS					
					validateData() from CMNC
					validateData() from MAIN
					Mode: NORMAL_OPERATIONS
					set next state to DATA_FILTER
					go to RUN_HOUSEKEEPING_TASKS		
				HW_RESETTING
					do nothing
				SYSTEM_SLEEPING
					skip for CMNC
					validateData() from MAIN
					Mode: SYSTEM_SLEEPING
					set next state to DATA_FILTER
					go to RUN_HOUSEKEEPING_TASKS
				SYSTEM_WAKING
					do nothing
				SW_RESETTING
					validateData() from CMNC
					validateData() from MAIN
					Mode: SW_RESETTING
					set next state to DATA_FILTER
					go to RUN_HOUSEKEEPING_TASKS
				SYSTEM_ERROR
					validateData() from CMNC
					validateData() from MAIN
					Mode: SYSTEM_ERROR
					set next state to DATA_FILTER
					go to RUN_HOUSEKEEPING_TASKS		
			DATA_FILTER				
				POWER_ON_RESET
					do nothing
				INITIALIZATION
					do nothing
				SYNCHRONIZATION					
					skip for CMNC
					filter and throw away all MAIN data except:
						system ready message(s) from MAIN
						system go message(s) from MAIN					
					no redirections from CMNC or MAIN
					Mode: SYNCHRONIZATION
					set next state to PROCESS_DATA
					go to RUN_HOUSEKEEPING_TASKS						
				SECURING_LINK
					filter and throw away all CMNC data except:
						establish secure link message(s) from CMNC
							Note: no reset (hw or sw) allowed yet. because if it can take a reset msg, it should be able to secure link. Also there is a secure link timeout, that then goes to error mode and allows for hw/sw reset.
					filter and direct MAIN data
						if redirection needed:
							redirectToMAIN = true					
					Mode: SECURING_LINK
					set next state to READ_INPUTS
					go to RUN_HOUSEKEEPING_TASKS						
				NORMAL_OPERATIONS
					filter and direct CMNC data
						if redirection needed:
							redirectToCMNC = true
					filter and direct MAIN data
						if redirection needed:
							redirectToMAIN = true
					Mode: NORMAL_OPERATIONS
					set next state to READ_INPUTS
					go to RUN_HOUSEKEEPING_TASKS						
				HW_RESETTING
					do nothing
				SYSTEM_SLEEPING
					skip for CMNC
					filter and throw away all MAIN data except:
						comm sleep request message(s) from MAIN
							DEBUG: If COMM misses this message, the code may go haywire. So if you have issues, you may want to have MAIN send it a few times before going to sleep.
					Mode: SYSTEM_SLEEPING
					set next state to PROCESS_DATA
					go to RUN_HOUSEKEEPING_TASKS	
				SYSTEM_WAKING
					do nothing
				SW_RESETTING
					filter and throw away all CMNC data except:
						hw reset request message(s) from CMNC
						sw reset request message(s) from CMNC
							Note: Allow HW or SW reset requests to override the sw reset process if needed
					filter and throw away all MAIN data except:
						hw reset request message(s) from MAIN
						All sw reset request or COMM sw request message(s) from MAIN
							Note: Allow HW or SW reset requests to override the sw reset process if needed						
					Mode: SW_RESETTING
					set next state to PROCESS_DATA
					go to RUN_HOUSEKEEPING_TASKS				
				SYSTEM_ERROR
					filter and throw away all MAIN data except:
						any redirections
							if redirection needed:
								redirectToMAIN = true
							(to allow system data to be passed from MAIN/AUXI/NAVI to CMNC)
						hw reset request msgs
						sw reset request msgs
					filter and direct CMNC data
						filter and throw away all CMNC data except:
							redirections
							hw reset request message(s) from CMNC
							sw reset request message(s) from CMNC		
							PIR status request message(s) from CMNC
						Allow all CMNC data to be redirected so MAIN/AUXI/NAVI can send requested data back. Each Arduino will filter out what it will allow in error mode.
						Note: This will be a known vulnerability with the Rover. If it's in error mode, anything can be sent to it to do anything. Though each Arduino may block certain messages.)					
						if redirection needed:
							redirectToCMNC = true							
					Mode: SYSTEM_ERROR
					set next state to READ_INPUTS
					go to RUN_HOUSEKEEPING_TASKS		
			READ_INPUTS
				POWER_ON_RESET
					do nothing
				INITIALIZATION
					do nothing		
				SYNCHRONIZATION
					do nothing
				SECURING_LINK
					read PIR
					Mode: SECURING_LINK
					set next state to PROCESS_DATA
					go to RUN_HOUSEKEEPING_TASKS	
				NORMAL_OPERATIONS
					read PIR
					Mode: NORMAL_OPERATIONS
					set next state to PROCESS_DATA
					go to RUN_HOUSEKEEPING_TASKS	
				HW_RESETTING
					do nothing
				SYSTEM_SLEEPING
					do nothing							
				SYSTEM_WAKING
					do nothing
				SW_RESETTING
					do nothing								
				SYSTEM_ERROR
					read PIR (just in case the PIR data is requested by CMNC for debugging)		
					Mode: SYSTEM_ERROR
					set next state to PROCESS_DATA
					go to RUN_HOUSEKEEPING_TASKS	
			PROCESS_DATA
				POWER_ON_RESET
					do nothing
				INITIALIZATION
					do nothing	
				SYNCHRONIZATION
					Skip for CMNC
					Skips PIR status	
					Process the messages for MAIN data
						For data, process all
						For commands, prioritize which has higher priority and only process the one with the higher priority.
							DEBUG TIP: If one always has a lower priority, it may always be overshadowed. So watch out for this. Else use interlocking ack/status in order to sit and wait and keep sending until you get an acknowledgement.
						(see "Command Options" below for more info)
						Note: If system go or system ready msg received from MAIN, see "Command Options" below for more info.
						If no msg (because only system go or system ready msgs can pass the data filter) from MAIN received && main_system_ready == false (MAIN system not ready yet, so keep incrementing the timeout counter)
							timeout_counter++
							main_msg_queue = SYSTEM_READY_STATUS (tells MAIN it's ready to synchronize)
						end if
					Unless overridden,
						set next state to CONTROL_OUTPUTS								
					Unless overridden,						
						Mode: SYNCHRONIZATION
					go to RUN_HOUSEKEEPING_TASKS
				SECURING_LINK
					Process CMNC data (see "Command Options" below for more info)
						Note: Either you should get no data or secure link data. as everything else was filtered out
					Process MAIN data (see "Command Options" below for more info)
						(the mode and next state may be overridden by MAIN data if required. i.e. error, etc. But under normal circumstances, it shouldn't.)
					Process PIR status
					Unless overridden,
						Mode: SECURING_LINK
					Unless overridden,						
						set next state to CONTROL_OUTPUTS					
					go to RUN_HOUSEKEEPING_TASKS
				NORMAL_OPERATIONS										
					Process PIR status							
					Process MAIN data (see "Command Options" below for more info)
					Process CMNC Data (see "Command Options" below for more info)				
					Unless overridden,
						set next state to CONTROL_OUTPUTS					
					Unless overridden,						
						Mode: NORMAL_OPERATIONS
					go to RUN_HOUSEKEEPING_TASKS					
				HW_RESETTING
					do nothing
				SYSTEM_SLEEPING
					Skip for CMNC
						Improvement Idea: Maybe allow hw resets requests from CMNC later if want to. For now good enough.
					Skips PIR status	
					Process MAIN data (see "Command Options" below for more info)
						Improvement Idea: Can add a timeout flag to the process and go to error if timeout reached if needed. But for now, keeping it simple.
						Improvement Idea: Maybe allow hw resets requests from MAIN later if want to. For now good enough.
						Note: Either you should get no data or comm sleep request from MAIN. as everything else was filtered out.
					Unless overridden,
						set next state to CONTROL_OUTPUTS								
					Unless overridden,						
						Mode: SYSTEM_SLEEPING
					go to RUN_HOUSEKEEPING_TASKS
				SYSTEM_WAKING
					do nothing					
				SW_RESETTING
					Skips PIR status
					Improvement Idea: Can add a timeout flag to the process and go to error if timeout reached if needed. But for now, keeping it simple.
					Process CMNC Data (see "Command Options" below for more info)	
						Note: Either you should get no data or hw or sw reset request from CMNC. as everything else was filtered out
						Note: If hw/sw reset requests from CMNC, see "Command Options" below for more info.						
					Process MAIN data (see "Command Options" below for more info)
						Note: Either you should get no data or hw/sw reset request (for all or COMM only) from MAIN. as everything else was filtered out
						Note: If hw/sw reset requests from MAIN, see "Command Options" below for more info.						
					Unless overridden,
						set next state to CONTROL_OUTPUTS								
					Unless overridden,						
						Mode: SW_RESETTING
					go to RUN_HOUSEKEEPING_TASKS			
				SYSTEM_ERROR					
					Process MAIN data (see "Command Options" below for more info)
						Note: Should only be a HW or SW request. Anything else is filtered out or redirected.
					Process CMNC data (see "Command Options" below for more info)
						Anything is allowed for debugging.
					Unless overridden,				
						Mode: SYSTEM_ERROR	
							(recreate the error msg. the error flags should still be set from before, i.e. sync_error, secure_link_error, etc.)						
					Unless overridden,
						Set next state to CONTROL_OUTPUTS
					go to RUN_HOUSEKEEPING_TASKS					
			CONTROL_OUTPUTS			
				POWER_ON_RESET
					do nothing
				INITIALIZATION
					do nothing		
				SYNCHRONIZATION
					Control Heart LED, heartbeat
					Mode: SYNCHRONIZATION
					set next state to CREATE_DATA
					go to RUN_HOUSEKEEPING_TASKS						
				SECURING_LINK
					Control Heart LED, heartbeat
					Mode: SECURING_LINK
					set next state to CREATE_DATA					
					go to RUN_HOUSEKEEPING_TASKS						
				NORMAL_OPERATIONS										
					Control Heart LED, heartbeat
					set next state to CREATE_DATA					
					go to RUN_HOUSEKEEPING_TASKS						
				HW_RESETTING
					Control Heart LED, blink
					HW Resets MAIN, NAVI, AUXI
					set next state to CREATE_DATA					
					go to RUN_HOUSEKEEPING_TASKS	
				SYSTEM_SLEEPING
					Control Heart LED, blink
					set next state to CREATE_DATA					
					go to RUN_HOUSEKEEPING_TASKS						
				SYSTEM_WAKING
					Control Heart LED, blink
					set next state to CREATE_DATA					
					go to RUN_HOUSEKEEPING_TASKS							
				SW_RESETTING
					Control Heart LED, blink
					set next state to CREATE_DATA					
					go to RUN_HOUSEKEEPING_TASKS						
				SYSTEM_ERROR					
					Control Heart LED, solid		
					set next state to CREATE_DATA					
					go to RUN_HOUSEKEEPING_TASKS					
			CREATE_DATA
				POWER_ON_RESET
					do nothing
				INITIALIZATION
					do nothing		
				SYNCHRONIZATION		
					since main_msg_queue == SYSTEM_READY_STATUS (COMM, aka this arduino, is up and running, so let MAIN know)
						create system ready msg for MAIN (tells MAIN it's ready to synchronize)				
					Mode: SYNCHRONIZATION
					set next state to TX_COMMUNICATIONS						
					go to RUN_HOUSEKEEPING_TASKS						
				SECURING_LINK	
					if main_msg_queue != NO_MSG
						create any msg(s) for MAIN, NAVI, AUXI as needed based on main_msg_queue									
					end if
					since cmnc_msg_queue == SYSTEM_READY_STATUS
						create system ready msg for CMNC (tells CMNC it's ready for a secure link)
					Mode: SECURING_LINK
					set next state to TX_COMMUNICATIONS
					go to RUN_HOUSEKEEPING_TASKS						
				NORMAL_OPERATIONS		
					if main_msg_queue != NO_MSG
						create any msg(s) for MAIN, NAVI, AUXI as needed based on main_msg_queue									
					end if
					if cmnc_msg_queue != NO_MSG
						create any msg(s) for CMNC as needed based on cmnc_msg_queue
					end if
					Mode: NORMAL_OPERATIONS
					set next state to TX_COMMUNICATIONS
					go to RUN_HOUSEKEEPING_TASKS						
				HW_RESETTING
					since main_msg_queue == COMM_HW_RESET_REQUEST
						Create (for) MAIN, COMM hw reset request msg
					since cmnc_msg_queue == HW_RESETTING
						Create CMNC hw resetting msg
					Mode: HW_RESETTING						
					set next state to TX_COMMUNICATIONS
					go to RUN_HOUSEKEEPING_TASKS	
						Note: though RUN_HOUSEKEEPING_TASKS is not required and can go straight to TX_COMMUNICATIONS, just doing so for consistency with other code.
				SYSTEM_SLEEPING
					since main_msg_queue == ALL_SLEEP_REQUEST
						Create (for) MAIN, COMM all sleep request msg
					since cmnc_msg_queue == SYSTEM_SLEEPING
						Create CMNC system sleeping msg
					Mode: SYSTEM_SLEEPING						
					set next state to TX_COMMUNICATIONS
					go to RUN_HOUSEKEEPING_TASKS	
						Note: though RUN_HOUSEKEEPING_TASKS is not required and can go straight to TX_COMMUNICATIONS, just doing so for consistency with other code.
				SYSTEM_WAKING
					since main_msg_queue == ALL_WAKE_REQUEST
						Create MAIN wake all request msg
					since cmnc_msg_queue == SYSTEM_WAKING
						Create CMNC system waking msg
					set next state to TX_COMMUNICATIONS
					go to RUN_HOUSEKEEPING_TASKS	
				SW_RESETTING
					since main_msg_queue ALL_SW_RESET_REQUEST
						Create MAIN all sw reset request msg
					since cmnc_msg_queue == SW_RESETTING
						Create CMNC sw resetting msg
					set next state to TX_COMMUNICATIONS
					go to RUN_HOUSEKEEPING_TASKS	
				SYSTEM_ERROR
					if main_msg_queue != NO_MSG
						create any msg(s) for MAIN, NAVI, AUXI as needed based on main_msg_queue									
					end if
					if cmnc_msg_queue != NO_MSG
						create any msg(s) for CMNC as needed based on cmnc_msg_queue
						Note: Any other messages created for CMNC has priority over error messages. Error messages are jsut for status, but any other messages may be used for debugging.
					else if sync_error == true		
						(Note: the sync_error flag can only be cleared with a sw reset or hw reset)					
						cmnc_msg_queue = SYNC_ERROR
						create error msg for CMNC about SYNC issues
					else if secure_link_error == true		
						(Note: the secure_link_error flag can only be cleared with a sw reset or hw reset)
						cmnc_msg_queue = SECURE_LINK_ERROR									
						create error msg for CMNC about secure link issues						
					end if						
					Mode: SYSTEM_ERROR
					set next state to TX_COMMUNICATIONS					
					go to RUN_HOUSEKEEPING_TASKS					
			TX_COMMUNICATIONS						
				POWER_ON_RESET
					do nothing
				INITIALIZATION
					do nothing
				SYNCHRONIZATION		
					skips for CMNC
					if main_msg_queue != NO_MSG
						Sends interally generated msg(s) to MAIN
					end if
					clear message queues and redirect flags
						cmnc_msg_queue = NO_MSG
						main_msg_queue = NO_MSG					
						redirectToCMNC = false
						redirectToMAIN = false
					Mode: SYNCHRONIZATION
					set next state to RX_COMMUNICATIONS											
					go to RUN_HOUSEKEEPING_TASKS
				SECURING_LINK		
					if main_msg_queue != NO_MSG
						Sends interally generated msg(s) to MAIN
					end if
					if redirectToMAIN == true
						Redirect external msg(s) to MAIN
					end if	
					if cmnc_msg_queue != NO_MSG
						Sends interally generated msg(s) to CMNC
					end if
					if redirectToCMNC == true
						Redirect external msg(s) to CMNC
					end if
					clear message queues and redirect flags
						cmnc_msg_queue = NO_MSG
						main_msg_queue = NO_MSG					
						redirectToCMNC = false
						redirectToMAIN = false			
					go to RUN_HOUSEKEEPING_TASKS
				NORMAL_OPERATIONS
					if main_msg_queue != NO_MSG
						Sends interally generated msg(s) to MAIN
					end if
					if redirectToMAIN == true
						Redirect external msg(s) to MAIN
					end if	
					if cmnc_msg_queue != NO_MSG
						Sends interally generated msg(s) to CMNC
					end if
					if redirectToCMNC == true
						Redirect external msg(s) to CMNC
					end if
					clear message queues and redirect flags
						cmnc_msg_queue = NO_MSG
						main_msg_queue = NO_MSG					
						redirectToCMNC = false
						redirectToMAIN = false		
					Mode: NORMAL_OPERATIONS
					set next state to RX_COMMUNICATIONS					
					go to RUN_HOUSEKEEPING_TASKS			
				HW_RESETTING
					Note: No redirection during hw resets
					if main_msg_queue != NO_MSG
						Sends interally generated msg(s) to MAIN
					end if
					if cmnc_msg_queue != NO_MSG
						Sends interally generated msg(s) to CMNC
					end if
					do not clear message queues. Keep sending the hw reset requests/status
					can clear the redirect flags
						redirectToCMNC = false
						redirectToMAIN = false		
					Mode: HW_RESETTING
					set next state to TX_COMMUNICATIONS					
						Note: Stay in the TX_COMMUNICATIONS state and keep sending hw resetting status to CMNC and hw reset request to MAIN until MAIN hw resets CMNC and puts it in POWER_ON_RESET mode at POR
					go to RUN_HOUSEKEEPING_TASKS				
				SYSTEM_SLEEPING
					Note: No redirection during system sleeping
					if main_msg_queue != NO_MSG
						Sends interally generated msg(s) to MAIN
					end if
					if cmnc_msg_queue != NO_MSG
						Sends interally generated msg(s) to CMNC
					end if
					clear message queues and redirect flags
						cmnc_msg_queue = NO_MSG
						main_msg_queue = NO_MSG					
						redirectToCMNC = false
						redirectToMAIN = false
						Note: When in SYSTEM_SLEEPING mode, it will regenerate the message every loop. (though inefficient, it allows for easier following of the code through the stages. Can change this to make it more efficient, later if needed)
					Mode: SYSTEM_SLEEPING
					set next state to RX_COMMUNICATIONS					
					go to RUN_HOUSEKEEPING_TASKS			
				SYSTEM_WAKING
					Note: No redirection during system waking
					if main_msg_queue != NO_MSG
						Sends interally generated msg(s) to MAIN
					end if
					if cmnc_msg_queue != NO_MSG
						Sends interally generated msg(s) to CMNC
					end if
					clear message queues and redirect flags
						cmnc_msg_queue = NO_MSG
						main_msg_queue = NO_MSG					
						redirectToCMNC = false
						redirectToMAIN = false
					Mode: SYNCHRONIZATION
						DEBUG TIP: If for some reason MAIN missed the ALL_WAKE_REQUEST, COMM will already be in SYNCHRONIZATION mode. It will eventually time out and go to SYSTEM_ERROR where it can be HW reset.
					set next state to RX_COMMUNICATIONS					
					go to RUN_HOUSEKEEPING_TASKS				
				SW_RESETTING
					Note: No redirection during sw resets
					if main_msg_queue != NO_MSG
						Sends interally generated msg(s) to MAIN
					end if
					if cmnc_msg_queue != NO_MSG
						Sends interally generated msg(s) to CMNC
					end if
					clear message queues and redirect flags
						cmnc_msg_queue = NO_MSG
						main_msg_queue = NO_MSG					
						redirectToCMNC = false
						redirectToMAIN = false
						Note: When in SW_RESETTING mode, it will regenerate the message every loop. (though inefficient, it allows for easier following of the code through the stages. Can change this to make it more efficient, later if needed)
					Mode: SW_RESETTING
					set next state to RX_COMMUNICATIONS					
					go to RUN_HOUSEKEEPING_TASKS										
				SYSTEM_ERROR
					if cmnc_msg_queue != NO_MSG							
						Sends error msg to CMNC (i.e. sync timeout, secure link timeout, etc.)														
					end if
					if redirectToCMNC == true
						Redirect external msg(s) to CMNC
					end if					
					Mode: SYSTEM_ERROR
					set next state to RX_COMMUNICATIONS
					clear message queues and redirect flags
						cmnc_msg_queue = NO_MSG
						main_msg_queue = NO_MSG					
						redirectToCMNC = false
						redirectToMAIN = false					
					go to RUN_HOUSEKEEPING_TASKS


			
			
State Matrix Design = States vs. Modes			
==================
States
==================
Note: These states don't always have to go in order.
	RUN_HOUSEKEEPING_TASKS
		runs in parallel with every loop
	RX_COMMUNICATIONS
	DATA_VALIDATION
		data parsing and validation
		validateData()
	DATA_FILTER
		dataDirector()
	READ_INPUTS
	PROCESS_DATA
	CONTROL_OUTPUTS			
	CREATE_DATA
	TX_COMMUNICATIONS		
	
	
	
	
	
	
	
	
	
	
==================
Modes
==================

Note: These states don't always have to go in order.
Note: *begin* means this is one of the starting points for this mode

POWER_ON_RESET
INITIALIZATION
SYNCHRONIZATION					
SECURING_LINK						
NORMAL_OPERATIONS						
HW_RESETTING
SYSTEM_SLEEPING
SW_RESETTING
SYSTEM_ERROR
SYSTEM_STANDBY (like go to sleep, except COMM stays away and uses PIR to wake up the other arduinos)
		
==================
Command Options (i.e. used in the PROCESS_DATA state. Typically from the NORMAL_OPERATIONS mode, but not always)
==================	
Note: Since the message queues (i.e. cmnc_msg_queue, etc.) are shared between external arduinos and this internal arduino, there could be data overwrites and lost. If this is an issue, you may have to redesign.
	Also since it only reads data once, you might miss data as well.
	You can't do a queue emptied status since the way the roverComm object is written, it takes in only one string and saves that for processing.
	Also the way it's currently designed, it will read up the the ROVER_COMM_SENTENCE_LENGTH, so if you send commands back to back, you may get two messages merged together and only one processed.
	You would have to have a delay and/or send end lines between the two messages.
	Messages can come from CMNC to COMM or MAIN to COMM
	Messages can come from CMNC to MAIN or COMM (internal) to MAIN
	Best to just keep resending messages until you get an acknowledgement for anything that is important.
	
Note: With external commands, you only want to do all hw or all sw request (and not individual hw/sw requests). Else the system won't be in sync anymore. So hw/sw requests must be synced and have controlled points of entry.
	But interally, it may call individual commands as required.
Note: With external commands, you only want to do all sleep requests (and not individual sleep requests). Else the system won't be in sync anymore. So sleep requests must be synced and have controlled points of entry.
	But internally, it may call individual commands as required.

--------------	
	
	
		System Go (from MAIN)
			if communications_secure = false
				Mode: SECURING_LINK *begin*
				cmnc_msg_queue = SYSTEM_READY_STATUS (tells CMNC it's ready for a secure link)
			else
				Mode: NORMAL_OPERATIONS *begin*
			end if
			timeout_counter = 0 (for future use)				
		System Ready (from MAIN)
			main_system_ready = true (so it can stop checking for this message since the MAIN system is known to be ready)
			timeout_counter = 0 (for future use)		
			main_msg_queue = SYSTEM_READY_STATUS (tells MAIN it's ready to synchronize)
		Establish Secure Link
			Mode: NORMAL_OPERATIONS *begin*
			timeout_counter = 0
		Break Secure Link
			Mode: SECURING_LINK *begin*
			timeout_counter = 0
			communications_secure = false
		HW Reset Request
			Mode: HW_RESETTING *begin*
			main_msg_queue == COMM_HW_RESET_REQUEST					
			cmnc_msg_queue == HW_RESETTING			
		All SW Reset Request
			Mode: SW_RESETTING *begin*	
			main_msg_queue == ALL_SW_RESET_REQUEST
			cmnc_msg_queue == SW_RESETTING			
		All Sleep Request
			Mode: SYSTEM_SLEEPING *begin*
			main_msg_queue == ALL_SLEEP_REQUEST
			cmnc_msg_queue == SYSTEM_SLEEPING								
		PIR Status
			cmnc_msg_queue or main_msg_queue (based on the requester) = PIR_STATUS
			Note: The PIR status message will be created in the CREATE_DATA state
		COMM SW Reset Request (usually from MAIN):
			Next State: RUN_HOUSEKEEPING_TASKS
			Mode: INITIALIZATION *begin*
		COMM Sleep Request (usually from MAIN):
			Mode: SYSTEM_WAKING *begin*
			main_msg_queue == ALL_WAKE_REQUEST					
			cmnc_msg_queue == SYSTEM_WAKING			
			Run pre-sleep tasks. (i.e. end software serial, as needed)
			Put COMM to sleep
				Don't switch states yet. Go to sleep in the current PROCESS_DATA state.
			The Xbee/Serial will wake up the sleep.
			Run wake up tasks. (i.e. begin SW serial as needed, etc.)
			Then it will go to RUN_HOUSEKEEPING_TASKS, while in SYSTEM_WAKING
				Then it will go to the next state, which is set will default to CONTROL_OUTPUTS

			

			
IMPROVEMENT TIP: Maybe add system hold and system standby states later if have time.			